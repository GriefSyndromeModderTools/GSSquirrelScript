function InputCancelMove()
{
	if (this.isAir)
	{
		if (this.flagState & 2097152 && this.input.b2 > 0 && this.input.b2 < 10)
		{
			this.u.BeginAirJump.call(this);
			return;
		}
	}
	else if (this.flagState & 2097152 && this.input.b2 > 0 && this.input.b2 < 10)
	{
		this.u.BeginJump.call(this);
		return;
	}
}

function InputAttack()
{
	if (this.input.b0 == 1)
	{
		this.u.inputCountA = 10;
	}

	if (this.input.b1 == 1)
	{
		this.u.inputCountB = 10;
	}

	if (this.input.b3 == 1)
	{
		this.u.inputCountC = 10;
	}

	this.u.inputCountA--;
	this.u.inputCountB--;
	this.u.inputCountC--;

	if (this.u.inputCountC > 0)
	{
		if (this.C_Check(40))
		{
			if (this.UseMagic(this.u.magicUse))
			{
				this.u.InputReset.call(this);

				if (this.isAir)
				{
					this.u.BeginMagic_Air.call(this);
				}
				else
				{
					this.u.BeginMagic.call(this);
				}
			}
		}
	}
	else if (this.u.inputCountB > 0)
	{
		if (this.C_Check(31) && this.input.y > 0)
		{
			if (this.cancelLV < 30)
			{
				this.u.freeCancel = true;
			}
			else
			{
				this.u.freeCancel = false;
			}

			this.u.InputReset.call(this);

			if (this.isAir)
			{
				this.u.BeginAttackUnderAir.call(this);
			}
			else
			{
				this.u.BeginAttackUnder.call(this);
			}
		}
		else if (this.C_Check(31) && this.input.y < 0)
		{
			if (this.cancelLV < 30)
			{
				this.u.freeCancel = true;
			}
			else
			{
				this.u.freeCancel = false;
			}

			this.u.InputReset.call(this);

			if (this.isAir)
			{
				this.u.BeginAttackUpperAir.call(this);
			}
			else
			{
				this.u.BeginAttackUpper.call(this);
			}
		}
		else if (this.C_Check(31) && this.input.x != 0)
		{
			if (this.cancelLV < 30)
			{
				this.u.freeCancel = true;
			}
			else
			{
				this.u.freeCancel = false;
			}

			this.u.InputReset.call(this);

			if (this.isAir)
			{
				this.u.BeginAttackFrontAir.call(this);
			}
			else
			{
				this.u.BeginAttackFront.call(this);
			}
		}
		else if (this.C_Check(30))
		{
			if (this.cancelLV < 30)
			{
				this.u.freeCancel = true;
			}
			else
			{
				this.u.freeCancel = false;
			}

			this.u.InputReset.call(this);

			if (this.isAir)
			{
				this.u.BeginAttackLongAir.call(this);
			}
			else
			{
				this.u.BeginAttackLong.call(this);
			}
		}
	}
	else if (this.u.inputCountA > 0)
	{
		if (this.C_Check(20))
		{
			if (this.motion == 20 + this.u.CA || this.motion == 21 + this.u.CA || this.motion == 22 + this.u.CA || this.motion == 23 + this.u.CA)
			{
				if (this.u.rushCount)
				{
					this.u.rushCount--;
					this.u.InputReset.call(this);

					if (this.isAir)
					{
						this.u.BeginAttackRushAir.call(this);
					}
					else
					{
						this.u.BeginAttackRush.call(this);
					}
				}
			}
			else
			{
				this.u.rushCount = 0;

				if (this.u.dexLV >= 2)
				{
					this.u.rushCount = 6;
				}

				this.u.InputReset.call(this);

				if (this.input.y < 0)
				{
					if (this.isAir)
					{
						this.u.BeginAttackA_UpperAir.call(this);
					}
					else
					{
						this.u.BeginAttackA_Upper.call(this);
					}
				}
				else if (this.isAir)
				{
					this.u.BeginAttackAir.call(this);
				}
				else
				{
					this.u.BeginAttack.call(this);
				}
			}
		}
	}
}

function BeginWalk()
{
	if (this.input.x > 0)
	{
		this.direction = 1.0;
		this.vx = 4.0;
	}
	else
	{
		this.direction = -1.0;
		this.vx = -4.0;
	}

	if (this.motion != this.u.CA + 1)
	{
		this.ChangeFreeMove();
		this.fallLabel = this.u.BeginFall;
		this.SetMotion(this.u.CA + 1, 0);
	}
}

function BeginJump()
{
	if (!this.isAir)
	{
		this.ChangeFreeMove();
		this.sitLabel = this.u.BeginSit;
		this.isAir = true;
		this.collisionMask = 8 | 16;
		this.vy = -15.0;
		this.PlaySE(1000);

		if (this.input.x * this.input.x >= 0.0099999998)
		{
			this.vx = this.input.x >= 0.1 ? 4.0 : -4.0;
			this.direction = this.input.x >= 0.1 ? 1.0 : -1.0;
			this.SetMotion(this.u.CA + 4, 0);
		}
		else
		{
			this.vx = 0.0;
			this.SetMotion(this.u.CA + 3, 0);
		}
	}
}

function BeginAirJump()
{
	if (this.u.jumpCount == 0)
	{
		this.ChangeFreeMove();
		this.sitLabel = this.u.BeginSit;
		this.u.jumpCount++;
		this.isAir = true;
		this.collisionMask = 8 | 16;
		this.vy = -15.0;
		this.PlaySE(1000);

		if (this.input.x * this.input.x >= 0.0099999998)
		{
			this.vx = this.input.x >= 0.1 ? 4.0 : -4.0;
			this.direction = this.input.x >= 0.1 ? 1.0 : -1.0;
			this.SetMotion(this.u.CA + 4, 0);
			return;
		}
		else
		{
			this.vx = 0.0;
			this.SetMotion(this.u.CA + 3, 0);
			return;
		}
	}
}

function BeginAirSlide()
{
	if (this.input.x)
	{
		this.vx += this.input.x > 0 ? 0.2 : -0.2;

		if (this.Abs(this.vx) > 4.0)
		{
			this.vx = this.vx > 0.0 ? 4.0 : -4.0;
		}
	}
}

function SwingLow()
{
	this.PlaySE(1600);
}

function BeginAttack()
{
	this.LabelClear();
	this.SetMotion(this.u.CA + 20, 0);
	this.vx *= 0.5;
	this.stateLabel = this.u.Attack;
	this.fallLabel = this.u.BeginFall;
	this.hitEffect = this.HitEffect_Low;

	if (this.input.x)
	{
		this.direction = this.input.x > 0 ? 1.0 : -1.0;
	}

	this.HitReset();
	this.SetEndTakeCallbackFunction(this.KeyActionCheck);
	this.keyAction = [
		function ()
		{
			this.u.SwingLow.call(this);
			this.vx = 5.0 * this.direction;
		},
		this.u.EndtoFreeMove
	];
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function BeginAttackA_Upper()
{
	this.LabelClear();
	this.SetMotion(this.u.CA + 20, 2);
	this.vx *= 0.5;
	this.stateLabel = this.u.Attack;
	this.fallLabel = this.u.BeginFall;
	this.hitEffect = this.HitEffect_Low;

	if (this.input.x)
	{
		this.direction = this.input.x > 0 ? 1.0 : -1.0;
	}

	this.HitReset();
	this.SetEndTakeCallbackFunction(this.KeyActionCheck);
	this.keyAction = [
		null,
		null,
		function ()
		{
			this.u.SwingLow.call(this);
			this.vx = 5.0 * this.direction;
		}
	];
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function Attack()
{
	if (this.Abs(this.vx) <= 0.40000001)
	{
		this.vx = 0.0;
	}
	else
	{
		this.vx -= this.vx > 0.0 ? 0.40000001 : -0.40000001;
	}
}

function BeginAttackAir()
{
	this.LabelClear();
	this.SetMotion(this.u.CA + 21, 0);
	this.stateLabel = this.u.AttackAir;
	this.sitLabel = this.u.BeginSit;
	this.hitEffect = this.HitEffect_Low;

	if (this.input.x)
	{
		this.direction = this.input.x > 0 ? 1.0 : -1.0;
	}

	if (this.Abs(this.vy) >= 3.0)
	{
		this.vy = this.vy > 0.0 ? 3.0 : -3.0;
	}

	this.HitReset();
	this.SetEndTakeCallbackFunction(this.KeyActionCheck);
	this.keyAction = [
		this.u.SwingLow,
		this.u.EndtoFreeMove
	];
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function BeginAttackA_UpperAir()
{
	this.LabelClear();
	this.SetMotion(this.u.CA + 21, 3);
	this.stateLabel = this.u.AttackAir;
	this.sitLabel = this.u.BeginSit;
	this.hitEffect = this.HitEffect_Low;

	if (this.input.x)
	{
		this.direction = this.input.x > 0 ? 1.0 : -1.0;
	}

	if (this.Abs(this.vy) >= 3.0)
	{
		this.vy = this.vy > 0.0 ? 3.0 : -3.0;
	}

	this.HitReset();
	this.SetEndTakeCallbackFunction(this.KeyActionCheck);
	this.keyAction = [
		null,
		null,
		this.u.SwingLow
	];
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function AttackAir()
{
	if (this.keyTake != 2 && this.keyTake != 5)
	{
		this.setG = 0.1;
	}

	if (this.input.x == 0)
	{
		if (this.Abs(this.vx) <= 0.1)
		{
			this.vx = 0.0;
		}
		else
		{
			this.vx -= this.vx > 0.0 ? 0.1 : -0.1;
		}
	}
	else
	{
		this.vx += this.input.x > 0 ? 0.1 : -0.1;

		if (this.vx * this.direction >= 2.0)
		{
			this.vx = 2.0 * this.direction;
		}

		if (this.vx * this.direction <= 0.0)
		{
			this.vx = 0.0;
		}
	}
}

function BeginAttackRush()
{
	if (this.motion == this.u.CA + 22)
	{
		if (this.keyTake == 1)
		{
			this.LabelClear();
			this.HitReset();
			this.SetMotion(this.u.CA + 22, 2);

			if (this.input.x)
			{
				this.direction = this.input.x > 0 ? 1.0 : -1.0;
			}

			this.stateLabel = this.u.AttackRush;
			this.fallLabel = this.u.BeginFall;
			this.hitEffect = this.HitEffect_Low;
			this.SetEndTakeCallbackFunction(this.KeyActionCheck);
			this.keyAction = [
				this.u.SwingLow,
				this.u.EndtoFreeMove,
				function ()
				{
					this.u.SwingLow.call(this);
					this.vx = 5.0 * this.direction;
				},
				this.u.EndtoFreeMove
			];
			this.SetEndMotionCallbackFunction(null);
		}
		else if (this.keyTake == 3)
		{
			this.LabelClear();
			this.HitReset();
			this.SetMotion(this.u.CA + 22, 0);

			if (this.input.x)
			{
				this.direction = this.input.x > 0 ? 1.0 : -1.0;
			}

			this.stateLabel = this.u.AttackRush;
			this.fallLabel = this.u.BeginFall;
			this.hitEffect = this.HitEffect_Low;
			this.SetEndTakeCallbackFunction(this.KeyActionCheck);
			this.keyAction = [
				this.u.SwingLow,
				this.u.EndtoFreeMove,
				function ()
				{
					this.u.SwingLow.call(this);
					this.vx = 5.0 * this.direction;
				},
				this.u.EndtoFreeMove
			];
			this.SetEndMotionCallbackFunction(null);
		}
	}
	else
	{
		this.LabelClear();
		this.HitReset();

		if (this.keyTake <= 1)
		{
			this.SetMotion(this.u.CA + 22, 0);
		}
		else
		{
			this.SetMotion(this.u.CA + 22, 2);
		}

		if (this.input.x)
		{
			this.direction = this.input.x > 0 ? 1.0 : -1.0;
		}

		this.stateLabel = this.u.AttackRush;
		this.fallLabel = this.u.BeginFall;
		this.hitEffect = this.HitEffect_Low;
		this.SetEndTakeCallbackFunction(this.KeyActionCheck);
		this.keyAction = [
			this.u.SwingLow,
			this.u.EndtoFreeMove,
			function ()
			{
				this.u.SwingLow.call(this);
				this.vx = 5.0 * this.direction;
			},
			this.u.EndtoFreeMove
		];
		this.SetEndMotionCallbackFunction(null);
	}
}

function AttackRush()
{
	if (this.Abs(this.vx) <= 0.40000001)
	{
		this.vx = 0.0;
	}
	else
	{
		this.vx -= this.vx > 0.0 ? 0.40000001 : -0.40000001;
	}
}

function BeginAttackRushAir()
{
	if (this.motion == this.u.CA + 23)
	{
		if (this.keyTake == 1 || this.keyTake == 2)
		{
			this.LabelClear();
			this.HitReset();
			this.SetMotion(this.u.CA + 23, 3);

			if (this.input.x)
			{
				this.direction = this.input.x > 0 ? 1.0 : -1.0;
			}

			this.stateLabel = this.u.AttackRushAir;
			this.sitLabel = this.u.BeginSit;
			this.hitEffect = this.HitEffect_Low;
			this.SetEndTakeCallbackFunction(this.KeyActionCheck);
			this.keyAction = [
				this.u.SwingLow,
				null,
				this.u.EndtoFreeMove,
				this.u.SwingLow,
				null,
				this.u.EndtoFreeMove
			];
			this.SetEndMotionCallbackFunction(null);
		}
		else if (this.keyTake == 4 || this.keyTake == 5)
		{
			this.LabelClear();
			this.HitReset();
			this.SetMotion(this.u.CA + 23, 0);

			if (this.input.x)
			{
				this.direction = this.input.x > 0 ? 1.0 : -1.0;
			}

			this.stateLabel = this.u.AttackRushAir;
			this.sitLabel = this.u.BeginSit;
			this.hitEffect = this.HitEffect_Low;
			this.SetEndTakeCallbackFunction(this.KeyActionCheck);
			this.keyAction = [
				this.u.SwingLow,
				null,
				this.u.EndtoFreeMove,
				this.u.SwingLow,
				null,
				this.u.EndtoFreeMove
			];
			this.SetEndMotionCallbackFunction(null);
		}
	}
	else
	{
		this.LabelClear();
		this.HitReset();

		if (this.keyTake <= 2)
		{
			this.SetMotion(this.u.CA + 23, 0);
		}
		else
		{
			this.SetMotion(this.u.CA + 23, 3);
		}

		if (this.input.x)
		{
			this.direction = this.input.x > 0 ? 1.0 : -1.0;
		}

		this.stateLabel = this.u.AttackRushAir;
		this.sitLabel = this.u.BeginSit;
		this.hitEffect = this.HitEffect_Low;
		this.SetEndTakeCallbackFunction(this.KeyActionCheck);
		this.keyAction = [
			this.u.SwingLow,
			null,
			this.u.EndtoFreeMove,
			this.u.SwingLow,
			null,
			this.u.EndtoFreeMove
		];
		this.SetEndMotionCallbackFunction(null);
	}
}

function AttackRushAir()
{
	if (this.keyTake != 2 && this.keyTake != 5)
	{
		this.setG = 0.1;
	}

	if (this.input.x == 0)
	{
		if (this.Abs(this.vx) <= 0.1)
		{
			this.vx = 0.0;
		}
		else
		{
			this.vx -= this.vx > 0.0 ? 0.1 : -0.1;
		}
	}
	else
	{
		this.vx += this.input.x > 0 ? 0.1 : -0.1;

		if (this.vx * this.direction >= 2.0)
		{
			this.vx = 2.0 * this.direction;
		}

		if (this.vx * this.direction <= 0.0)
		{
			this.vx = 0.0;
		}
	}
}

function Set_ChargeEffect( c_ )
{
	switch(c_)
	{
	case 5:
		this.PlaySE(1613);

		if (!this.isAir)
		{
			local t = this.DefaultShotTable();
			t.flag1 = 4;
			t.flag2 = 0.0;
			t.scale = 2.0;
			this.world2d.CreateActor(this.x, this.y + this.vy, this.direction, this.Effect_Smoke, t);
		}

		break;

	case 3:
		this.PlaySE(1612);

		if (!this.isAir)
		{
			local t = this.DefaultShotTable();
			t.flag1 = 4;
			t.flag2 = 0.0;
			t.scale = 1.0;
			this.world2d.CreateActor(this.x, this.y + this.vy, this.direction, this.Effect_Smoke, t);
		}

		break;

	case 1:
		this.PlaySE(1615);

		if (!this.isAir)
		{
			local t = this.DefaultShotTable();
			t.flag1 = 4;
			t.flag2 = 0.0;
			t.scale = 1.0;
			this.world2d.CreateActor(this.x, this.y + this.vy, this.direction, this.Effect_Smoke, t);
		}

		break;
	}
}

function BeginAttackLong()
{
	this.LabelClear();
	this.SetMotion(this.u.CA + 24, 0);
	this.stateLabel = this.u.AttackLong;
	this.fallLabel = this.u.BeginFall;
	this.count = 0;
	this.u.chargeCount = 0;
	this.u.chargeLV = 0;
	this.PlaySE(1610);

	if (this.input.x)
	{
		this.direction = this.input.x > 0 ? 1.0 : -1.0;
	}

	this.SetEndTakeCallbackFunction(this.KeyActionCheck);
	this.keyAction = [];
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function AttackLong()
{
	if (this.Abs(this.vx) <= 0.2)
	{
		this.vx = 0.0;
	}
	else
	{
		this.vx -= this.vx > 0.0 ? 0.2 : -0.2;
	}

	if (this.keyTake == 1)
	{
		local c_ = this.u.ChargeGainLoop.call(this, 30, 5);
		this.u.Set_ChargeEffect.call(this, c_);

		if (this.input.b1 <= 0)
		{
			this.SetMotion(this.u.CA + 24, 2);
			this.u.AttackLongFire.call(this);
		}
	}
}

function AttackLongFire()
{
	this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Init_AssultRifle, this.DefaultShotTable());
	this.world2d.CreateActor(this.point1_x + this.vx, this.point1_y + this.vy, this.direction, this.Drop_Shell_M, this.DefaultShotTable());
	local t = this.DefaultShotTable();
	t.flag1 = this.u.chargeLV;
	this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Homura_M_HandGun, t);
	this.PlaySE(1611);

	if (this.Abs(this.vx) <= 2.0)
	{
		this.vx -= 2.0 * this.direction;
	}
}

function BeginAttackLongAir()
{
	this.LabelClear();
	this.SetMotion(this.u.CA + 25, 0);
	this.PlaySE(1610);
	this.stateLabel = this.u.AttackLongAir;
	this.sitLabel = this.u.BeginSit;
	this.u.chargeCount = 0;
	this.u.chargeLV = 0;
	this.count = 0;
	this.flag1 = 0.0;
	this.vx *= 0.5;
	this.vy *= 0.1;

	if (this.input.x)
	{
		this.direction = this.input.x > 0 ? 1.0 : -1.0;
	}

	this.SetEndTakeCallbackFunction(this.KeyActionCheck);
	this.keyAction = [];
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function AttackLongAir()
{
	if (this.keyTake <= 1)
	{
		this.setG = 0.025;
	}

	if (this.keyTake == 1)
	{
		local c_ = this.u.ChargeGainLoop.call(this, 30, 5);
		this.u.Set_ChargeEffect.call(this, c_);

		if (this.input.b1 <= 0)
		{
			this.SetMotion(this.u.CA + 24, 2);
			this.u.AttackLongFireAir.call(this);
		}
	}
}

function AttackLongFireAir()
{
	this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Init_AssultRifle, this.DefaultShotTable());
	this.world2d.CreateActor(this.point1_x + this.vx, this.point1_y + this.vy, this.direction, this.Drop_Shell_M, this.DefaultShotTable());
	local t = this.DefaultShotTable();
	t.flag1 = this.u.chargeLV;
	this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Homura_M_HandGun, t);
	this.PlaySE(1611);

	if (this.Abs(this.vx) <= 2.0)
	{
		this.vx -= 2.0 * this.direction;
	}

	this.vy = -2.0;
}

function BeginAttackFront()
{
	this.LabelClear();
	this.SetMotion(this.u.CA + 30, 0);
	this.PlaySE(1620);
	this.stateLabel = this.u.AttackFront;
	this.fallLabel = this.u.BeginFall;

	if (this.input.x)
	{
		this.direction = this.input.x > 0 ? 1.0 : -1.0;
	}

	this.vx *= 0.25;
	this.SetEndTakeCallbackFunction(this.KeyActionCheck);
	this.keyAction = [
		this.u.AttackFrontFire,
		this.u.DropShotGun
	];
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function AttackFront()
{
	if (this.Abs(this.vx) <= 0.2)
	{
		this.vx = 0.0;
	}
	else
	{
		this.vx -= this.vx > 0.0 ? 0.2 : -0.2;
	}
}

function AttackFrontFire()
{
	if (this.Abs(this.vx) <= 3.0)
	{
		this.vx -= 3.0 * this.direction;
	}

	this.PlaySE(1621);
	this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Homura_M_ShotGun_Flash, this.DefaultShotTable());
	local t = this.DefaultShotTable();
	t.flag1 = 4;
	t.flag2 = 0.050000001;
	t.rz = 3.141592 * 0.5;
	this.world2d.CreateActor(this.point0_x, this.point0_y, this.direction, this.Effect_Smoke, t);

	for( local i = 0; i < 10; i++ )
	{
		this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Homura_M_ShotGun, this.DefaultShotTable());
	}
}

function DropShotGun()
{
	local t = this.DefaultShotTable();
	this.world2d.CreateActor(this.point0_x, this.point0_y, this.direction, this.Drop_ShotGun, t);
}

function BeginAttackFrontAir()
{
	this.LabelClear();
	this.SetMotion(this.u.CA + 31, 0);
	this.PlaySE(1620);
	this.stateLabel = this.u.AttackFrontAir;
	this.sitLabel = this.u.BeginSit;
	this.vx *= 0.25;
	this.vy *= 0.1;

	if (this.input.x)
	{
		this.direction = this.input.x > 0 ? 1.0 : -1.0;
	}

	this.SetEndTakeCallbackFunction(this.KeyActionCheck);
	this.keyAction = [
		this.u.AttackFrontAirFire,
		this.u.DropShotGun
	];
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function AttackFrontAir()
{
	if (this.keyTake == 0)
	{
		this.setG = 0.025;
	}
}

function AttackFrontAirFire()
{
	this.vx -= 4.0 * this.direction;
	this.vy -= 10.0;
	this.isAir = true;
	this.PlaySE(1621);
	this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Homura_M_ShotGun_Flash, this.DefaultShotTable());
	local t = this.DefaultShotTable();
	t.flag1 = 4;
	t.flag2 = 0.050000001;
	t.rz = 3.141592 * 0.5;
	this.world2d.CreateActor(this.point0_x, this.point0_y, this.direction, this.Effect_Smoke, t);

	for( local i = 0; i < 10; i++ )
	{
		this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Homura_M_ShotGun, this.DefaultShotTable());
	}
}

function BeginAttackUnder()
{
	this.LabelClear();
	this.vx = -4.0 * this.direction;
	this.vy = -15.0;

	if (!this.isAir)
	{
		local t = this.DefaultShotTable();
		t.flag1 = 1;
		this.world2d.CreateActor(this.x + this.vx, this.y + this.vy, -this.direction, this.Effect_Smoke, t);
		t.scale = 1.0;
	}

	this.isAir = true;
	this.SetMotion(this.u.CA + 32, 0);
	this.stateLabel = this.u.AttackUnder;
	this.sitLabel = this.u.BeginSit;

	if (this.input.x)
	{
		this.direction = this.input.x > 0 ? 1.0 : -1.0;

		if (this.input.x * this.direction > 0)
		{
			this.flag1 = 1;
		}
		else
		{
			this.flag1 = 0;
		}
	}
	else
	{
		this.u.flag1 = 0;
	}

	this.SetEndTakeCallbackFunction(this.u.AttackUnderFire);
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function AttackUnder()
{
	if (this.keyTake == 1)
	{
	}
	else if (this.Abs(this.vx) <= 0.1)
	{
		this.vx = 0.0;
	}
	else
	{
		this.vx -= this.vx > 0.0 ? 0.1 : -0.1;
	}
}

function AttackUnderFire()
{
	this.SetEndTakeCallbackFunction(null);
	this.PlaySE(1630);
	this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Homura_M_Granade_Under, this.DefaultShotTable());
}

function BeginAttackUnderAir()
{
	this.LabelClear();
	this.isAir = true;
	this.SetMotion(this.u.CA + 33, 0);
	this.stateLabel = this.u.AttackUnderAir;
	this.sitLabel = this.u.BeginSit;

	if (this.input.x)
	{
		this.direction = this.input.x > 0 ? 1.0 : -1.0;

		if (this.input.x * this.direction > 0)
		{
			this.flag1 = 1;
		}
		else
		{
			this.flag1 = 0;
		}
	}
	else
	{
		this.flag1 = 0;
	}

	this.vx = -4.0 * this.direction;
	this.vy = -10.0;
	this.SetEndTakeCallbackFunction(this.u.AttackUnderAirFire);
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function AttackUnderAir()
{
}

function AttackUnderAirFire()
{
	this.SetEndTakeCallbackFunction(null);
	this.PlaySE(1630);
	local t = this.DefaultShotTable();
	t.flag1 = this.flag1;
	this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Homura_M_Granade_Under, t);
}

function BeginAttackUpper()
{
	this.LabelClear();
	this.SetMotion(this.u.CA + 34, 0);
	this.stateLabel = this.u.AttackUpperAir;
	this.sitLabel = this.u.BeginSit;

	if (this.input.x)
	{
		this.direction = this.input.x > 0 ? 1.0 : -1.0;

		if (this.input.x * this.direction > 0)
		{
			this.u.flag1 = 1;
		}
		else
		{
			this.u.flag1 = 0;
		}
	}
	else
	{
		this.u.flag1 = 0;
	}

	this.vx = this.vx + 2.0 * this.direction;

	if (this.vx * this.direction > 4.0)
	{
		this.vx = 4.0 * this.direction;
	}

	this.vy = -12.5;
	this.isAir = true;
	this.SetEndTakeCallbackFunction(this.u.AttackUpperFire);
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function AttackUpper()
{
}

function AttackUpperFire()
{
	this.SetEndTakeCallbackFunction(null);
	this.PlaySE(1630);
	local t = this.DefaultShotTable();
	t.flag1 = this.u.flag1;
	this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Homura_M_Granade_Upper, t);
}

function BeginAttackUpperAir()
{
	this.LabelClear();
	this.SetMotion(this.u.CA + 35, 0);
	this.stateLabel = this.u.AttackUpperAir;
	this.sitLabel = this.u.BeginSit;

	if (this.input.x)
	{
		this.direction = this.input.x > 0 ? 1.0 : -1.0;

		if (this.input.x * this.direction > 0)
		{
			this.u.flag1 = 1;
		}
		else
		{
			this.u.flag1 = 0;
		}
	}
	else
	{
		this.u.flag1 = 0;
	}

	this.vx = this.vx + 2.0 * this.direction;

	if (this.vx * this.direction > 4.0)
	{
		this.vx = 4.0 * this.direction;
	}

	this.vy = -10.0;
	this.isAir = true;
	this.SetEndTakeCallbackFunction(this.u.AttackUpperAirFire);
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function AttackUpperAir()
{
}

function AttackUpperAirFire()
{
	this.SetEndTakeCallbackFunction(null);
	this.PlaySE(1630);
	local t = this.DefaultShotTable();
	t.flag1 = this.u.flag1;
	this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Homura_M_Granade_Upper, t);
}

function BeginMagic()
{
	this.LabelClear();
	this.vx *= 0.25;
	this.SetMotion(this.u.CA + 40, 0);
	this.stateLabel = this.u.Magic;
	this.fallLabel = this.u.BeginFall;

	if (this.input.x)
	{
		this.direction = this.input.x > 0 ? 1.0 : -1.0;
	}

	this.SetEndTakeCallbackFunction(this.KeyActionCheck);
	this.keyAction = [
		this.u.Magic_TimeStop
	];
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function Magic()
{
	if (this.Abs(this.vx) <= 0.2)
	{
		this.vx = 0.0;
	}
	else
	{
		this.vx -= this.vx > 0.0 ? 0.2 : -0.2;
	}
}

function Magic_TimeStop()
{
	this.game.timeStop = 240;
	this.PlaySE(1144);
	this.Set_MonoColor();
}

function BeginMagic_Air()
{
	this.LabelClear();
	this.vx = 0.0;
	this.vy = 0.0;
	this.setG = 0.0;
	this.SetMotion(this.u.CA + 41, 0);
	this.stateLabel = this.u.Magic_Air;
	this.sitLabel = this.u.BeginSit;

	if (this.input.x)
	{
		this.direction = this.input.x > 0 ? 1.0 : -1.0;
	}

	this.SetEndTakeCallbackFunction(this.KeyActionCheck);
	this.keyAction = [
		this.u.Magic_TimeStop
	];
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function Magic_Air()
{
	if (this.keyTake <= 1)
	{
		this.setG = 0.0;
	}
}

