function InputReset()
{
	this.u.inputCountA = 0;
	this.u.inputCountB = 0;
	this.u.inputCountC = 0;
}

function InputMove()
{
	if (::game.enableInput)
	{
		if (this.isAir)
		{
			if (this.input.b2 == 1)
			{
				this.u.BeginAirJump.call(this);
			}

			if (this.input.x)
			{
				this.u.BeginAirSlide.call(this);
			}
		}
		else
		{
			if (this.input.b2 == 1)
			{
				if (this.input.y > 0 && this.hitBottom == 4)
				{
					this.fallCount = 20;
				}
				else
				{
					this.u.BeginJump.call(this);
					return;
				}
			}

			if (this.input.x)
			{
				this.u.BeginWalk.call(this);
			}
			else
			{
				this.u.BeginStand.call(this);
			}
		}
	}
	else if (this.isAir)
	{
	}
	else
	{
		this.u.BeginStand.call(this);
	}
}

function ChargeLostLoop()
{
	if (this.u.chargeCount > 0)
	{
		this.u.chargeCount--;

		if (this.u.chargeCount <= 0)
		{
			if (this.u.chargeLV > 0)
			{
				this.u.chargeLV--;
			}
		}
	}
}

function ChargeGainLoop( line_, max_ )
{
	this.u.chargeCount += 2;

	if (this.u.chargeCount >= line_)
	{
		if (this.u.chargeLV >= max_)
		{
			this.u.chargeCount = line_;
			return 0;
		}
		else
		{
			this.u.chargeLV++;
			this.u.chargeCount = 0;
			return this.u.chargeLV;
		}
	}
	else
	{
		return 0;
	}
}

function Update_Normal()
{
	if (this.hitStopTime)
	{
		this.hitStopTime--;
		return false;
	}

	this.PlayerCommonLoop();
	this.SetGravity();

	if (this.stateLabel)
	{
		this.stateLabel();

		if (::game.enableInput)
		{
			this.u.InputCancelMove.call(this);
		}
	}
	else
	{
		this.u.InputMove.call(this);
	}

	if (::game.enableInput)
	{
		this.u.InputAttack.call(this);
	}

	return true;
}

function Update_QB()
{
	if (this.hitStopTime)
	{
		this.hitStopTime--;
		return false;
	}

	this.PlayerCommonLoop_QB();
	this.SetGravity();

	if (this.stateLabel)
	{
		this.stateLabel();

		if (::game.enableInput)
		{
			this.u.InputCancelMove.call(this);
		}
	}
	else
	{
		this.u.InputMove.call(this);
	}

	if (::game.enableInput)
	{
		this.u.InputAttack.call(this);
	}

	return true;
}

function EndtoFreeMove()
{
	this.ChangeFreeMove();

	if (this.u.warikomi)
	{
		this.u.warikomi.call(this);
	}

	if (this.isAir)
	{
		this.u.BeginFall.call(this);
	}
	else
	{
		this.u.BeginStand.call(this);
	}
}

function BeginStand()
{
	if (this.motion != this.u.CA && this.motion != this.u.CA + 9)
	{
		this.ChangeFreeMove();

		if (this.u.warikomi)
		{
			this.u.warikomi.call(this);
		}

		this.vx = 0.0;
		this.isAir = false;
		this.fallLabel = this.u.BeginFall;
		this.SetMotion(this.u.CA + 0, 0);
	}
}

function BeginFall()
{
	if (this.motion != this.u.CA + 8)
	{
		this.ChangeFreeMove();

		if (this.u.warikomi)
		{
			this.u.warikomi.call(this);
		}

		this.isAir = true;
		this.sitLabel = this.u.BeginSit;
		this.SetMotion(this.u.CA + 8, 0);
	}
}

function BeginSit()
{
	this.ChangeFreeMove();

	if (this.u.warikomi)
	{
		this.u.warikomi.call(this);
	}

	this.fallLabel = this.u.BeginFall;
	this.SetMotion(this.u.CA + 0, 0);
	this.PlaySE(1001);
	this.isAir = false;
	this.vx = 0.0;
	this.vy = 0.0;
	this.u.jumpCount = 0;
}

function Fall_Down()
{
	this.vx = 0.0;
	this.vy = -25.0;
	this.collisionMask = 16;
	this.PlaySE(1010);
	this.isVisible = true;
	this.LabelClear();
	this.count = 0;
	this.revive = 0;
	this.immuneGravity = true;
	this.isAir = true;
	this.SetMotion(this.u.CA + 17, 0);
	local t = this.DefaultShotTable();
	t.flag1 = this.u.CA;
	this.world2d.CreateActor(this.x, this.y, this.direction, this.Player_Revive, t);
	this.flag1 = this.u.regainCycle * this.u.regainRate * 1.5 * this.lifeMax;

	if (this.soul - this.flag1 <= this.soulMax * 0.050000001)
	{
		this.flag1 = (this.soul - this.soulMax * 0.050000001).tointeger();
	}

	this.reviveMax = this.flag1;
	this.flag2 = (this.reviveMax * 0.0049999999).tointeger();
	this.stateLabel = function ()
	{
		this.revive += this.flag2;
		this.soul -= this.flag2;

		if (this.revive >= this.reviveMax)
		{
			this.life = this.lifeMax;
			this.regainLife = this.life;
			this.revive = 0;
			this.ChangeFreeMove();
			this.sitLabel = this.u.BeginSit;
			this.isAir = true;
			this.collisionMask = 8 | 16;
			this.vy = -10.0;
			this.PlaySE(1006);
			this.vx = 0.0;
			this.immuneGravity = false;
			this.isAir = true;
			this.SetMotion(this.u.CA + 3, 0);
			local t = this.DefaultShotTable();
			t.flag1 = this.u.CA;
			this.world2d.CreateActor(this.x, this.y, this.direction, this.Player_Revive, t);
		}
		else
		{
			this.count++;

			if (this.count % 8 == 0)
			{
				local t = this.DefaultShotTable();
				t.flag1 = this.u.CA;
				this.world2d.CreateActor(this.x - 64 + this.rand() % 128, this.y - 113 + this.rand() % 128, this.direction, this.Player_DeadTrail, t);
			}

			if (this.count % 6 == 0)
			{
				local t = this.DefaultShotTable();
				t.flag1 = this.u.CA;
				this.world2d.CreateActor(this.x - 32 + this.rand() % 64, this.y - 113 + this.rand() % 128, this.direction, this.Player_DeadTrailB, t);
			}

			if (this.Abs(this.vx) <= 4.0)
			{
				if (this.input.x)
				{
					this.vx += this.input.x > 0 ? 0.25 : -0.25;

					if (this.Abs(this.vx) >= 4.0)
					{
						this.vx = this.vx > 0.0 ? 4.0 : -4.0;
					}
				}
				else
				{
					this.vx *= 0.89999998;
				}
			}
			else
			{
				this.vx *= 0.97000003;
			}

			if (this.Abs(this.vy) <= 4.0)
			{
				if (this.input.y)
				{
					this.vy += this.input.y > 0 ? 0.25 : -0.25;

					if (this.Abs(this.vy) >= 4.0)
					{
						this.vy = this.vy > 0.0 ? 4.0 : -4.0;
					}
				}
				else
				{
					this.vy *= 0.89999998;
				}
			}
			else
			{
				this.vy *= 0.97000003;
			}

			if (this.Abs(this.vx) <= 4.0 && this.Abs(this.vy) <= 4.0)
			{
				this.collisionMask = 8 | 4 | 16;
			}
		}
	};
}

function Dead( t )
{
	this.Game_PlayerDown(this.type);

	if (this.soul <= this.u.regainCycle * this.u.regainRate * 3 * this.lifeMax)
	{
		this.u.Lost.call(this);
	}
	else
	{
		if (this.u.warikomi)
		{
			this.u.warikomi.call(this);
		}

		this.PlaySE(1005);
		this.LabelClear();
		this.SetMotion(this.u.CA + 18, 0);
		this.count = 0;
		this.vx = -2.0 * this.direction;
		this.vy = -7.0;
		this.setG = 0.1;
		this.flag1 = 30;
		this.flag2 = 10;
		this.flag3 = 0;
		this.isAir = true;
		this.sitLabel = this.u.Dead_Down;
		this.SetEndTakeCallbackFunction(this.KeyActionCheck);
		this.keyAction = [
			null,
			null,
			this.u.Dead_FaceDown
		];
		this.stateLabel = function ()
		{
			if (this.keyTake <= 1)
			{
				this.setG = this.hitG;
			}

			if (this.keyTake == 3)
			{
				this.count++;

				if (this.count >= 20)
				{
					if (this.isVisible)
					{
						this.flag3--;

						if (this.flag3 <= 0)
						{
							this.flag3 = this.flag2;
							this.isVisible = false;
						}
					}
					else
					{
						this.flag3--;

						if (this.flag3 <= 0)
						{
							this.flag3 = this.flag1;
							this.flag1 -= 5;

							if (this.flag1 < 5)
							{
								this.flag1 = 5;
							}

							this.isVisible = true;
						}
					}

					if (this.count >= 180)
					{
						this.u.Dead_Wait.call(this);
						return;
					}
				}
			}
		};
	}
}

function Fall_Dead()
{
	this.u.Dead_Wait.call(this);
	this.vx = 0.0;
	this.vy = -25.0;
	return;
}

function Dead_Wait()
{
	this.PlaySE(1010);
	this.isVisible = true;
	this.LabelClear();
	this.count = 0;
	this.revive = 0;
	this.immuneGravity = true;
	this.isAir = true;
	this.SetMotion(this.u.CA + 17, 0);
	local t = this.DefaultShotTable();
	t.flag1 = this.u.CA;
	this.world2d.CreateActor(this.x, this.y, this.direction, this.Player_Revive, t);
	this.flag1 = this.u.regainCycle * this.u.regainRate * 3 * this.lifeMax;

	if (this.soul - this.flag1 <= this.soulMax * 0.050000001)
	{
		this.flag1 = (this.soul - this.soulMax * 0.050000001).tointeger();
	}

	this.reviveMax = this.flag1;
	this.flag2 = (this.reviveMax * 0.0049999999).tointeger();
	this.stateLabel = function ()
	{
		this.revive += this.flag2;
		this.soul -= this.flag2;

		if (this.revive >= this.reviveMax)
		{
			this.life = this.lifeMax;
			this.regainLife = this.life;
			this.revive = 0;
			this.ChangeFreeMove();
			this.sitLabel = this.u.BeginSit;
			this.isAir = true;
			this.collisionMask = 8 | 16;
			this.vy = -10.0;
			this.PlaySE(1006);
			this.vx = 0.0;
			this.immuneGravity = false;
			this.isAir = true;
			this.invin = 120;
			this.u.flashCount = 120;
			this.SetMotion(this.u.CA + 3, 0);
			local t = this.DefaultShotTable();
			t.flag1 = this.u.CA;
			this.world2d.CreateActor(this.x, this.y, this.direction, this.Player_Revive, t);
		}
		else
		{
			this.count++;

			if (this.count % 8 == 0)
			{
				local t = this.DefaultShotTable();
				t.flag1 = this.u.CA;
				this.world2d.CreateActor(this.x - 64 + this.rand() % 128, this.y - 113 + this.rand() % 128, this.direction, this.Player_DeadTrail, t);
			}

			if (this.count % 6 == 0)
			{
				local t = this.DefaultShotTable();
				t.flag1 = this.u.CA;
				this.world2d.CreateActor(this.x - 32 + this.rand() % 64, this.y - 113 + this.rand() % 128, this.direction, this.Player_DeadTrailB, t);
			}

			if (this.Abs(this.vx) <= 4.0)
			{
				if (this.input.x)
				{
					this.vx += this.input.x > 0 ? 0.25 : -0.25;

					if (this.Abs(this.vx) >= 4.0)
					{
						this.vx = this.vx > 0.0 ? 4.0 : -4.0;
					}
				}
				else
				{
					this.vx *= 0.89999998;
				}
			}
			else
			{
				this.vx *= 0.97000003;
			}

			if (this.Abs(this.vy) <= 4.0)
			{
				if (this.input.y)
				{
					this.vy += this.input.y > 0 ? 0.25 : -0.25;

					if (this.Abs(this.vy) >= 4.0)
					{
						this.vy = this.vy > 0.0 ? 4.0 : -4.0;
					}
				}
				else
				{
					this.vy *= 0.89999998;
				}
			}
			else
			{
				this.vy *= 0.97000003;
			}

			if (this.Abs(this.vx) <= 4.0 && this.Abs(this.vy) <= 4.0)
			{
				this.collisionMask = 8 | 16;
			}
		}
	};
}

function Dead_Smash( t )
{
	this.u.Dead.call(this, t);
}

function Dead_Down()
{
	this.vx = 0.0;
	this.vy = 0.0;
	this.setG = 0.0;
	this.isAir = false;
	this.sitLabel = null;
	this.SetMotion(this.u.CA + 18, 2);
	local t = this.DefaultShotTable();
	t.flag1 = 4;
	t.flag2 = 0.0;
	t.scale = 1.0;
	this.world2d.CreateActor(this.x + this.vx, this.y + this.vy, this.direction, this.Effect_Smoke, t);
}

function Dead_FaceDown()
{
}

function FallLost()
{
	this.Game_PlayerDead(this.type);
	this.PlaySE(1007);
	this.LabelClear();

	if (this.u.warikomi)
	{
		this.u.warikomi.call(this);
	}

	this.SetMotion(this.u.CA + 19, 0);
	this.soul = 0;
	this.stateLabel = null;
	this.isActive = false;
	this.vx = 0.0;
	this.vy = 0.0;
	return;
}

function Lost()
{
	this.Game_PlayerDead(this.type);
	this.PlaySE(1007);
	this.LabelClear();

	if (this.u.warikomi)
	{
		this.u.warikomi.call(this);
	}

	this.SetMotion(this.u.CA + 19, 0);
	this.soul = 0;

	if (this.isAir)
	{
		this.vx = -2.0 * this.direction;
		this.vy = -7.0;
		this.setG = 0.1;
	}
	else
	{
		this.vx = 0.0;
		this.vy = 0.0;
	}

	this.setG = 0.25;
	this.count = 0;
	this.isAir = true;
	this.sitLabel = this.u.Lost_Down;
	this.SetEndTakeCallbackFunction(this.KeyActionCheck);
	this.keyAction = [
		null,
		null,
		this.u.Lost_Dispell
	];
	this.stateLabel = function ()
	{
		this.deadCount++;

		if (this.y >= this.camera2d.bottom + 512 && this.deadCount >= 120)
		{
			this.PlaySE(1008);
			this.isActive = false;
			this.vx = 0.0;
			this.vy = 0.0;
			return;
		}

		if (this.keyTake <= 1)
		{
			this.setG = 0.25;
		}

		if (this.keyTake == 3)
		{
			this.count++;

			if (this.count == 60)
			{
				local t = this.DefaultShotTable();
				t.flag1 = this.u.CA;
				this.world2d.CreateActor(this.x, this.y, this.direction, this.Player_Lost, t);
			}

			if (this.count >= 120)
			{
				this.count = 0;
				this.SetMotion(this.u.CA + 19, 4);
			}
		}

		if (this.keyTake == 4)
		{
			this.count++;

			if (this.count == 60)
			{
				this.PlaySE(1008);
			}

			if (this.count >= 60)
			{
				if (this.red > 0.025)
				{
					this.red -= 0.025;
				}
				else
				{
					this.red = 0.0;
				}

				this.green = this.red;
				this.blue = this.red;
				local t = this.DefaultShotTable();
				t.flag1 = this.count * 7 * 0.017453292;
				t.flag2 = 0.1 + (this.count - 60) * 0.0024999999;
				this.world2d.CreateActor(this.x + (this.rand() % 41 - 20) * t.flag2, this.y, this.direction, this.PlayerDeathAura, t);
			}

			if (this.count >= 240)
			{
				if (this.alpha > 0.025)
				{
					this.alpha -= 0.025;
				}
				else
				{
					this.isActive = false;
				}
			}
		}
	};
}

function Lost_Down()
{
	this.vx = 0.0;
	this.vy = 0.0;
	this.hitG = 0.0;
	this.isAir = false;
	this.sitLabel = null;
	this.immuneGravity = true;
	this.SetMotion(this.u.CA + 19, 2);
}

function Lost_Dispell()
{
	this.PlaySE(1009);
}

function Damage_Light( t )
{
	this.LabelClear();

	if (this.u.warikomi)
	{
		this.u.warikomi.call(this);
	}

	this.PlaySE(1003);
	this.hitTable = t;
	this.u.regainCount = 180;
	this.SetMotion(this.u.CA + 10, 0);
	this.direction = t.direction;
	this.vx = t.hitVecX * this.direction;
	this.vy = t.hitVecY;
	this.setG = 0.0;
	this.stateLabel = this.u.DamLightUpdate;
	this.isAir = true;
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
	this.SetEndTakeCallbackFunction(null);
	this.count = 0;
}

function DamLightUpdate()
{
	this.setG = this.hitG;
}

function Damage_Heavy( t )
{
	this.LabelClear();

	if (this.u.warikomi)
	{
		this.u.warikomi.call(this);
	}

	this.PlaySE(1004);
	this.hitTable = t;
	this.u.regainCount = 180;
	this.SetMotion(this.u.CA + 10, 0);
	this.direction = t.direction;
	this.vx = t.hitVecX * this.direction;
	this.vy = t.hitVecY;
	this.hitG = 0.0;
	this.setG = 0.0;
	this.stateLabel = this.u.DamHeavyUpdate;
	this.isAir = true;
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
	this.SetEndTakeCallbackFunction(null);
	this.count = 0;
	this.invin = 120;
	this.u.flashCount = 120;
}

function DamHeavyUpdate()
{
	this.setG = 0.25;
}

