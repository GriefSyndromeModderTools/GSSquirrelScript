function Update_Normal()
{
	if (this.UpdateStopCheck())
	{
		return false;
	}

	this.ScrollOut_Enemy(this.scrollOut_margin);

	if (this.fallCount > 0)
	{
		this.fallCount--;

		if (this.fallCount == 0)
		{
			this.collisionMask = 8 | 4;
		}
		else
		{
			this.collisionMask = 8;
		}
	}
	else
	{
		this.collisionMask = 8 | 4;
	}

	if (this.aList.len() > 0)
	{
		this.u.CPU_aListAction.call(this);
	}
	else
	{
		local Dice_ = this.rand() % 100;

		if (Dice_ <= 50)
		{
			local l = this.ActionData();
			l.script = this.u.RandomTarget;
			this.aList.append(l);
		}
		else
		{
			local l = this.ActionData();
			l.script = this.u.SearchTarget;
			this.aList.append(l);
		}

		local l = this.ActionData();
		l.script = this.u.BeginTargetTurn;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.FreeCheck;
		this.aList.append(l);

		if (this.target in this.actor)
		{
			if (this.actor[this.target].y - this.y <= -150.0)
			{
				if (Dice_ <= 75)
				{
					local l = this.ActionData();
					l.script = this.u.BeginJump;
					this.aList.append(l);
					local l = this.ActionData();
					l.script = this.u.FreeCheck;
					this.aList.append(l);
				}

				Dice_ = this.rand() % 100;
			}
			else
			{
				if (this.actor[this.target].y - this.y >= 100.0 && this.hitBottom == 4)
				{
					if (Dice_ <= 75)
					{
						local l = this.ActionData();
						l.script = this.u.BeginStepFall;
						this.aList.append(l);
						local l = this.ActionData();
						l.script = this.u.FreeCheck;
						this.aList.append(l);
					}
				}

				Dice_ = this.rand() % 100;
			}
		}

		Dice_ = this.rand() % 100;

		if (Dice_ <= 15)
		{
			local l = this.ActionData();
			l.script = this.u.BeginJump_Front;
			this.aList.append(l);
			local l = this.ActionData();
			l.script = this.u.FreeCheck;
			this.aList.append(l);
		}

		Dice_ = this.rand() % 100;

		if (Dice_ <= 75)
		{
			local l = this.ActionData();
			l.script = this.u.BeginWalk;
			l.time = 40 + this.rand() % 60;
			this.aList.append(l);
			local l = this.ActionData();
			l.script = this.u.BeginWalkStop;
			this.aList.append(l);
		}

		local l = this.ActionData();
		l.script = this.u.FreeCheck;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.BeginStand;
		l.time = 10 + 50;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.CPU_Attack;
		this.aList.append(l);
	}

	this.EnemyCommonLoop();
	this.FieldCheck();
	this.SetGravity();

	if (this.stateLabel)
	{
		this.stateLabel.call(this);
	}

	return true;
}

function Update_ShotOnly()
{
	if (this.UpdateStopCheck())
	{
		return false;
	}

	this.ScrollOut_Enemy(this.scrollOut_margin);

	if (this.aList.len() > 0)
	{
		this.u.CPU_aListAction.call(this);
	}
	else
	{
		local Dice_ = this.rand() % 100;
		local l = this.ActionData();
		l.script = this.u.BeginStand;
		l.time = 120;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.SearchTarget;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.BeginTargetTurn;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.FreeCheck;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.BeginAttackA;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.FreeCheck;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.BeginAttackA;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.FreeCheck;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.BeginAttackA;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.FreeCheck;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.BeginStand;
		l.time = 180;
		this.aList.append(l);
	}

	this.EnemyCommonLoop();
	this.FieldCheck();
	this.SetGravity();

	if (this.stateLabel)
	{
		this.stateLabel.call(this);
	}

	return true;
}

function CPU_Attack( val )
{
	local d = this.GetTargetDist();
	local Dice_ = this.rand() % 100;
	this.aList.resize(0);

	if (d != false)
	{
		if (this.target in this.actor)
		{
			local l = this.ActionData();
			l.script = this.u.BeginTargetTurn;
			this.aList.append(l);
			local l = this.ActionData();
			l.script = this.u.FreeCheck;
			this.aList.append(l);

			if (Dice_ <= 50 - 17)
			{
				local l = this.ActionData();
				l.script = this.u.BeginAttackB;
				this.aList.append(l);
			}
			else
			{
				local l = this.ActionData();
				l.script = this.u.BeginAttackA;
				this.aList.append(l);
			}

			local l = this.ActionData();
			l.script = this.u.FreeCheck;
			this.aList.append(l);
			local l = this.ActionData();
			l.script = this.u.BeginStand;
			l.time = 10;
			this.aList.append(l);
		}
	}

	return true;
}

function EndtoFreeMove()
{
	this.LabelClear();

	if (this.isAir)
	{
		this.SetMotion(this.u.CA + 3, 0);
		this.sitLabel = this.u.BeginSit;
	}
	else
	{
		this.vx = 0.0;
		this.SetMotion(this.u.CA, 0);
		this.fallLabel = this.u.BeginFall;
	}
}

function EndtoReleaseActor()
{
	this.ReleaseActor();
}

function BeginStand( dir )
{
	if (this.flagState & 32)
	{
		if (this.motion != this.u.CA)
		{
			this.LabelClear();
			this.fallLabel = this.u.BeginFall;
			this.vx = 0.0;
			this.SetMotion(this.u.CA, 0);
		}
	}

	return true;
}

function BeginSit()
{
	this.LabelClear();
	this.stateLabel = this.u.Sit_Update;
	this.fallLabel = this.u.BeginFall;
	this.isAir = false;
	this.SetMotion(this.u.CA + 4, 0);
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
	this.vx *= 0.5;
	this.vy = 0.0;
	return true;
}

function Sit_Update()
{
	if (this.Abs(this.vx) <= 0.5)
	{
		this.vx = 0.0;
	}
	else
	{
		this.vx -= this.vx > 0.0 ? 0.5 : -0.5;
	}
}

function BeginWalk( dir )
{
	if (this.flagState & 32)
	{
		if (this.motion != this.u.CA + 1)
		{
			this.LabelClear();
			this.fallLabel = this.u.BeginFall;
			this.SetMotion(this.u.CA + 1, 0);
			this.vx = (this.direction * 3.0 + this.rand() % 100 * 0.0099999998) * this.u.sizeRate;
		}
	}

	return true;
}

function BeginWalkStop( val )
{
	if (this.flagState & 32)
	{
		if (this.motion != this.u.CA + 1 || this.keyTake != 1)
		{
			this.LabelClear();
			this.fallLabel = this.u.BeginFall;
			this.SetMotion(this.u.CA + 1, 1);
			this.count = 0;
			this.stateLabel = this.u.WalkStopUpdate;
			this.SetEndTakeCallbackFunction(this.u.EndtoFreeMove);
			return false;
		}
	}

	return true;
}

function WalkStopUpdate()
{
	if (this.Abs(this.vx) <= 0.25)
	{
		this.vx = 0.0;
	}
	else
	{
		this.vx -= this.vx > 0.0 ? 0.25 : -0.25;
	}

	return true;
}

function BeginJump( dir )
{
	if (this.flagState & 32)
	{
		if (this.motion != this.u.CA + 2 && !this.isAir)
		{
			this.LabelClear();
			this.fallLabel = this.u.BeginFall;
			this.SetEndTakeCallbackFunction(this.KeyActionCheck);
			this.keyAction = [
				this.u.Jump_Move
			];
			this.stateLabel = this.u.Jump_Update;
			this.SetMotion(this.u.CA + 2, 0);

			if (dir)
			{
				this.direction = dir;
			}

			this.vx = 0.0;
			return false;
		}
	}

	return true;
}

function Jump_Move()
{
	this.collisionMask = 8;
	this.vx = (1.0 + this.rand() % 10 * 0.1) * this.direction;
	this.vy = -13.0 - this.rand() % 20 * 0.1;
	this.isAir = true;
	this.sitLabel = this.u.BeginSit;
	this.fallLabel = null;
	this.setG = 0.34999999;
}

function BeginJump_Front( dir )
{
	if (this.flagState & 32)
	{
		if (this.motion != this.u.CA + 2 && !this.isAir)
		{
			this.LabelClear();
			this.SetEndTakeCallbackFunction(this.KeyActionCheck);
			this.keyAction = [
				this.u.Jump_Move_Front
			];
			this.stateLabel = this.u.Jump_Update;
			this.sitLabel = this.u.BeginSit;
			this.SetMotion(this.u.CA + 2, 0);

			if (dir)
			{
				this.direction = dir;
			}

			this.vx = 0.0;
			return false;
		}
	}

	return true;
}

function Jump_Move_Front()
{
	this.collisionMask = 8;
	this.vx = (4.5 + this.rand() % 15 * 0.1) * this.direction;
	this.vy = -8.0 - this.rand() % 20 * 0.1;
	this.isAir = true;
	this.sitLabel = this.u.BeginSit;
	this.fallLabel = null;
	this.setG = 0.34999999;
}

function Jump_Update()
{
	if (this.keyTake == 1)
	{
		if (this.vy >= -1.0)
		{
			this.SetMotion(this.u.CA + 2, 2);
			return;
		}
	}

	if (this.keyTake >= 1)
	{
		this.setG = 0.34999999;
	}
}

function BeginFall()
{
	this.LabelClear();
	this.isAir = true;
	this.sitLabel = this.u.BeginSit;
	this.vy = 0.0;
	this.SetMotion(this.u.CA + 3, 0);
	return false;
}

function BeginStepFall( t )
{
	this.LabelClear();
	this.fallCount = 30;
	this.isAir = true;
	this.sitLabel = this.u.BeginSit;
	this.vy = 0.0;
	this.SetMotion(this.u.CA + 3, 0);
	return false;
}

function BeginTargetTurn( val )
{
	if (this.target in this.actor)
	{
		local dir_ = 1.0;

		if (this.x > this.actor[this.target].x)
		{
			dir_ = -1.0;
		}

		local t = this.u.BeginTurn.call(this, dir_);

		if (t)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	else
	{
		return false;
	}
}

function BeginTurn( dir )
{
	if (this.flagState & 32)
	{
		if (this.direction != dir)
		{
			if (this.motion != this.u.CA + 5)
			{
				this.LabelClear();
				this.fallLabel = this.u.BeginFall;
				this.vx = 0.0;
				this.SetMotion(this.u.CA + 5, 0);
				this.SetEndTakeCallbackFunction(this.u.DirectionTurn);
				this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
			}
		}

		return false;
	}

	return true;
}

function DirectionTurn()
{
	this.direction = -this.direction;
}

function ForceDead()
{
	if (this.life > 0)
	{
		this.life = 0;
		this.LabelClear();
		this.SetMotion(this.u.CA + 19, 0);
		this.isAir = true;
		this.ox = 0.0;
		this.oy = -51.0;
		this.vx = (-3.0 + this.rand() % 20 * 0.1) * this.direction;
		this.vy = -6.0 - this.rand() % 20 * 0.1;
		this.rz = 0.0;
		this.hitG = 0.15000001;
		this.flag1 = 137.5 * 0.2 * 0.017453292;
		this.red = 0.5;
		this.blue = 0.5;
		this.green = 0.5;
		this.stateLabel = this.u.Dead_Update;
		this.sitLabel = this.u.Dead_Bound;
		this.wallLabel = this.u.Dead_Wall;
		this.SetEndMotionCallbackFunction(this.u.EndtoReleaseActor);
	}
}

function Dead( t )
{
	this.LabelClear();
	this.SetMotion(this.u.CA + 19, 0);
	this.isAir = true;
	this.ox = 0.0;
	this.oy = -51.0;
	this.direction = t.direction;
	this.vx = (-3.0 + this.rand() % 20 * 0.1) * this.direction;
	this.vy = -6.0 - this.rand() % 20 * 0.1;
	this.rz = 0.0;
	this.setG = 0.0;
	this.hitG = 0.15000001;
	this.flag1 = 137.5 * 0.2 * 0.017453292;
	this.red = 0.5;
	this.blue = 0.5;
	this.green = 0.5;
	this.stateLabel = this.u.Dead_Update;
	this.sitLabel = this.u.Dead_Bound;
	this.wallLabel = this.u.Dead_Wall;
	this.SetEndMotionCallbackFunction(this.u.EndtoReleaseActor);
}

function Dead_Smash( t )
{
	this.LabelClear();
	this.SetMotion(this.u.CA + 19, 0);
	this.isAir = true;
	this.ox = 0.0;
	this.oy = -51.0;
	this.direction = t.direction;
	this.vx = t.hitVecX * this.direction;
	this.vy = t.hitVecY;
	this.hitG = t.hitVecG;
	this.setG = 0.0;
	this.flag1 = 137.5 * 0.2 * 0.017453292;
	this.red = 0.25;
	this.blue = 0.25;
	this.green = 0.25;
	this.stateLabel = this.u.Dead_Update;
	this.sitLabel = this.u.Dead_Bound;
	this.wallLabel = this.u.Dead_Wall;
	this.SetEndMotionCallbackFunction(this.u.EndtoReleaseActor);
}

function Dead_Update()
{
	if (this.keyTake == 0)
	{
		if (this.Abs(this.vx) > 0.0049999999)
		{
			this.vx -= this.vx > 0.0 ? 0.0049999999 : -0.0049999999;
		}

		this.deadCount++;
		this.rz += this.flag1;
		this.setG = this.hitG;

		if (this.deadCount >= 60)
		{
			this.invin = 60;
		}

		if (this.deadCount >= 120)
		{
			this.Game_DefeatEnemy();
			this.PlaySE(3809);
			this.sitLabel = null;
			this.wallLabel = null;
			this.vx = 0.0;
			this.vy = 0.0;
			this.setG = 0.0;
			this.SetMotion(this.u.CA + 19, 1);
		}
	}
	else
	{
		this.vx = 0.0;
		this.vy = 0.0;
		this.setG = 0.0;
	}
}

function Dead_Bound()
{
	this.vy *= -0.5;

	if (this.vy > -3.0)
	{
		this.vy = -3.0;
	}

	this.vx *= 0.5;
	this.SetMotion(this.u.CA + 19, 0);
	this.hitG = 0.15000001;
}

function Dead_Wall()
{
	if (this.keyTake == 0)
	{
		this.vx *= -0.5;
	}
	else
	{
		this.SetMotion(this.u.CA + 19, 0);
		this.vx *= -0.5;
		this.vy = -5.0;
		this.hitG = 0.15000001;
	}
}

function Damage_Light( t )
{
	this.hitTable = t;
	this.LabelClear();
	this.aList = [];
	this.SetMotion(this.u.CA + 10, 0);
	this.direction = t.direction;
	this.vx = t.hitVecX * this.direction * 0.1;
	this.vy = t.hitVecY * 0.1;
	this.hitG = 0.0;
	this.setG = 0.0;
	this.stateLabel = this.u.DamageLight_Update;
	this.isAir = true;
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
	this.count = 0;
	return false;
}

function DamageLight_Knock()
{
	this.SetMotion(this.u.CA + 10, 1);
	this.sitLabel = this.u.BeginSit;
	this.direction = this.hitTable.direction;
	this.vx = this.hitTable.hitVecX * this.direction;
	this.vy = this.hitTable.hitVecY;
	this.hitG = this.hitTable.hitVecG;
}

function DamageLight_Update()
{
	if (this.keyTake == 0)
	{
		this.setG = 0.0;
		this.hitStopTime--;

		if (this.hitStopTime <= 0)
		{
			this.u.DamageLight_Knock.call(this);
		}
	}
	else
	{
		if (this.Abs(this.vx) >= 1.0)
		{
			this.vx *= 0.80000001;
		}

		this.setG = this.hitG;
	}
}

function Damage_Heavy( t )
{
	this.hitTable = t;
	this.LabelClear();
	this.aList = [];
	this.SetMotion(this.u.CA + 11, 0);
	this.direction = t.direction;
	this.vx = t.hitVecX * this.direction * 0.1;
	this.vy = t.hitVecY * 0.1;
	this.hitG = 0.0;
	this.setG = 0.0;
	this.stateLabel = this.u.DamageHeavy_Update;
	this.isAir = true;
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function DamageHeavy_Knock()
{
	this.SetMotion(this.u.CA + 11, 1);
	this.sitLabel = this.u.DamageHeavy_Bound;
	this.wallLabel = this.u.DamageHeavy_Wall;
	this.direction = this.hitTable.direction;
	this.vx = this.hitTable.hitVecX * this.direction;
	this.vy = this.hitTable.hitVecY;
	this.hitG = this.hitTable.hitVecG;
}

function DamageHeavy_Update()
{
	if (this.keyTake == 0)
	{
		this.setG = 0.0;
		this.hitStopTime--;

		if (this.hitStopTime <= 0)
		{
			this.u.DamageHeavy_Knock.call(this);
		}
	}
	else
	{
		this.setG = this.hitG;
	}
}

function DamageHeavy_Bound()
{
	this.sitLabel = null;
	this.wallLabel = null;
	this.SetMotion(this.u.CA + 10, 1);
	this.vy = -4.0;
	this.hitG = 0.25;
	this.stateLabel = this.u.DamageLight_Update;
	this.isAir = true;
	this.SetEndTakeCallbackFunction(this.u.EndtoFreeMove);
	this.count = 0;
}

function DamageHeavy_Wall()
{
	this.wallLabel = null;
	this.vx *= -0.5;
}

function Damage_Smash( t )
{
	this.LabelClear();
	this.aList = [];
	this.SetMotion(this.u.CA + 12, 0);
	this.direction = t.direction;
	this.vx = t.hitVecX * this.direction;
	this.vy = t.hitVecY;
	this.hitG = 0.0;
	this.setG = 0.0;
	this.stateLabel = this.u.DamageSmash_Update;
	local R_ = this.atan2(this.vy, this.vx);

	if (this.cos(R_) >= 0.98500001 || this.cos(R_) <= -0.98500001)
	{
		this.wallLabel = this.u.DamageSmash_Wall;
	}
	else
	{
		this.sitLabel = this.u.DamageSmash_Bound;
	}

	this.isAir = true;
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
}

function DamageSmash_Update()
{
	this.setG = 0.0;
}

function DamageSmash_Bound()
{
	this.PlaySE(2100);
	this.SetMotion(this.u.CA + 13, 0);
	this.vy = 0.0;
	this.vx = 0.0;
	this.hitG = 0.0;
	this.stateLabel = this.u.DamageBound_Update;
	this.sitLabel = null;
	this.wallLabel = null;
	this.isAir = false;
	this.SetEndTakeCallbackFunction(this.u.DamageBound_Move);
}

function DamageBound_Update()
{
	this.setG = this.hitG;
}

function DamageBound_Move()
{
	this.vy = -5.0;
	this.vx = -2.0 * this.direction;
	this.hitG = 0.25;
	this.sitLabel = this.u.DamageHeavy_Bound;
	this.isAir = true;
	this.SetEndTakeCallbackFunction(null);
}

function DamageSmash_Wall()
{
	this.PlaySE(2100);
	this.SetMotion(this.u.CA + 14, 0);
	this.vy = 0.0;
	this.vx = 0.0;
	this.hitG = 0.0;
	this.stateLabel = this.u.DamageBound_Update;
	this.SetEndTakeCallbackFunction(this.u.DamageBound_Wall);
	this.sitLabel = null;
	this.wallLabel = null;
	this.isAir = true;
	this.count = 0;
}

function DamageBound_Wall()
{
	this.vy = -5.0;
	this.vx = 2.0 * this.direction;
	this.hitG = 0.25;
	this.wallLabel = null;
	this.sitLabel = this.u.DamageHeavy_Bound;
	this.isAir = true;
	this.SetEndTakeCallbackFunction(null);
	this.count = 0;
}

function BeginAttackA( dir )
{
	if (this.flagState & 32)
	{
		this.LabelClear();
		this.fallLabel = this.u.BeginFall;
		this.count = 0;
		this.atkCount = 0;
		this.SetMotion(this.u.CA + 20, 0);

		if (dir)
		{
			this.direction = dir;
		}

		this.stateLabel = function ()
		{
			if (this.Abs(this.vx) > 0.5)
			{
				this.vx -= this.vx > 0.0 ? 0.5 : -0.5;
			}
			else
			{
				this.vx = 0.0;
			}
		};
		this.SetEndTakeCallbackFunction(this.KeyActionCheck);
		this.keyAction = [
			function ()
			{
				this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Shot_6B, this.DefaultShotTable());
			}
		];
		this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
		return false;
	}

	return true;
}

function BeginAttackB( dir )
{
	if (this.flagState & 32)
	{
		this.LabelClear();
		this.HitReset();
		this.count = 60;
		this.atkCount = 0;
		this.SetMotion(this.u.CA + 21, 0);

		if (dir)
		{
			this.direction = dir;
		}

		this.stateLabel = function ()
		{
			switch(this.keyTake)
			{
			case 0:
			case 1:
				this.vx *= 0.89999998;
				this.vy *= 0.89999998;

				if (this.keyTake == 1)
				{
					this.count--;
				}

				if (this.count <= 0)
				{
					this.SetMotion(this.u.CA + 21, 2);
					this.count = 60;
					this.PlaySE(3807);
				}

				break;

			case 2:
			case 3:
				this.vy = 0.0;
				this.vx += 0.75 * this.direction;

				if (this.Abs(this.vx) >= 7.0)
				{
					this.vx = 7.0 * this.direction;
				}

				this.count--;

				if (this.count <= 0)
				{
					this.SetMotion(this.u.CA + 21, 4);
				}

				if (this.count % 3 == 0)
				{
					this.world2d.CreateActor(this.point0_x + (80 - this.rand() % 161), this.point0_y + (80 - this.rand() % 161), this.direction, this.Trail_6B_Assult, this.DefaultShotTable());
				}

				break;

			case 4:
				if (this.Abs(this.vx) >= 0.25)
				{
					this.vx -= this.vx > 0.0 ? 0.25 : -0.25;
				}
				else
				{
					this.vx = 0.0;
				}

				break;
			}
		};
		this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
		return false;
	}

	return true;
}

