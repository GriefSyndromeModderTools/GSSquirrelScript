function Update_Normal()
{
	if (this.UpdateStopCheck())
	{
		return false;
	}

	if (this.aList.len() > 0)
	{
		this.u.CPU_aListAction.call(this);
	}
	else
	{
		local Dice_ = this.rand() % 100;

		if (Dice_ <= 50)
		{
			local l = this.ActionData();
			l.script = this.u.RandomTarget;
			this.aList.append(l);
		}
		else
		{
			local l = this.ActionData();
			l.script = this.u.SearchTarget;
			this.aList.append(l);
		}

		local l = this.ActionData();
		l.script = this.u.BeginTargetTurn;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.FreeCheck;
		this.aList.append(l);
		Dice_ = this.rand() % 100;
		local d = this.GetTargetDist();

		if (Dice_ <= 50)
		{
			if (d != false)
			{
				if (d <= 150 * 150 * this.u.sizeRate)
				{
					local l = this.ActionData();
					l.script = this.u.BeginWalkBack;
					l.time = 30 + this.rand() % 60;
					this.aList.append(l);
				}
				else
				{
					local l = this.ActionData();
					l.script = this.u.BeginWalk;
					l.time = 30 + this.rand() % 60;
					this.aList.append(l);
				}
			}
			else
			{
				local l = this.ActionData();
				l.script = this.u.BeginWalk;
				l.time = 30 + this.rand() % 60;
				this.aList.append(l);
			}

			local l = this.ActionData();
			l.script = this.u.BeginWalkStop;
			this.aList.append(l);
		}

		Dice_ = this.rand() % 100;

		if (d != false)
		{
			if (Dice_ <= 50 && d >= 200.0 * 200.0 * this.u.sizeRate)
			{
				local l = this.ActionData();
				l.script = this.u.BeginDive;
				l.val = 90;
				this.aList.append(l);
			}
			else if (Dice_ <= 80 && d >= 500.0 * 500.0 * this.u.sizeRate)
			{
				local l = this.ActionData();
				l.script = this.u.BeginDive;
				l.val = 90;
				this.aList.append(l);
			}
			else if (d >= 800.0 * 800.0)
			{
				local l = this.ActionData();
				l.script = this.u.BeginDive;
				l.val = 90;
				this.aList.append(l);
			}
		}

		local l = this.ActionData();
		l.script = this.u.FreeCheck;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.BeginStand;
		l.time = 60 + this.rand() % 30;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.CPU_Attack;
		this.aList.append(l);
	}

	this.EnemyCommonLoop();
	this.FieldCheck();
	this.SetGravity();

	if (this.stateLabel)
	{
		this.stateLabel.call(this);
	}

	return true;
}

function CPU_Attack( val )
{
	local d = this.GetTargetDist();
	local Dice_ = this.rand() % 100;
	this.aList.resize(0);

	if (d != false)
	{
		if (this.target in this.actor)
		{
			local l = this.ActionData();
			l.script = this.u.BeginTargetTurn;
			this.aList.append(l);
			local l = this.ActionData();
			l.script = this.u.FreeCheck;
			this.aList.append(l);

			if (d <= 200 * 200 * this.u.sizeRate && d >= 100 * 100 * this.u.sizeRate)
			{
				if (Dice_ <= 80)
				{
					local l = this.ActionData();
					l.script = this.u.BeginAttackA;
					this.aList.append(l);
				}
			}
		}
	}

	return true;
}

function EndtoFreeMove()
{
	this.LabelClear();
	this.vx = 0.0;
	this.SetMotion(this.u.CA, 0);
}

function BeginStand( dir )
{
	if (this.flagState & 32)
	{
		if (this.motion != this.u.CA)
		{
			this.LabelClear();
			this.vx = 0.0;
			this.SetMotion(this.u.CA, 0);
		}
	}

	return true;
}

function BeginWalk( dir )
{
	if (this.flagState & 32)
	{
		if (this.motion != this.u.CA + 1)
		{
			this.LabelClear();
			this.SetMotion(this.u.CA + 1, 0);
			this.vx = (this.direction * 1.0 + this.rand() % 11 * 0.1) * this.u.sizeRate;
		}
	}

	return true;
}

function BeginWalkBack( dir )
{
	if (this.flagState & 32)
	{
		if (this.motion != this.u.CA + 1)
		{
			this.LabelClear();
			this.SetMotion(this.u.CA + 1, 0);
			this.vx = (this.direction * -2.0 + this.rand() % 6 * 0.1) * this.u.sizeRate;
		}
	}

	return true;
}

function BeginWalkStop( val )
{
	if (this.flagState & 32)
	{
		if (this.motion != this.u.CA + 1 || this.keyTake != 1)
		{
			this.LabelClear();
			this.SetMotion(this.u.CA + 1, 1);
			this.count = 0;
			this.stateLabel = this.u.WalkStopUpdate;
			this.SetEndTakeCallbackFunction(this.u.EndtoFreeMove);
			return false;
		}
	}

	return true;
}

function WalkStopUpdate()
{
	if (this.Abs(this.vx) <= 0.25)
	{
		this.vx = 0.0;
	}
	else
	{
		this.vx -= this.vx > 0.0 ? 0.25 : -0.25;
	}

	return true;
}

function BeginTargetTurn( val )
{
	if (this.target in this.actor)
	{
		local dir_ = 1.0;

		if (this.x > this.actor[this.target].x)
		{
			dir_ = -1.0;
		}

		local t = this.u.BeginTurn.call(this, dir_);

		if (t)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	else
	{
		return false;
	}
}

function BeginTurn( dir )
{
	if (this.flagState & 32)
	{
		if (this.direction != dir)
		{
			if (this.motion != this.u.CA + 5)
			{
				this.LabelClear();
				this.vx = 0.0;
				this.SetMotion(this.u.CA + 5, 0);
				this.SetEndTakeCallbackFunction(this.u.DirectionTurn);
				this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
			}
		}

		return false;
	}

	return true;
}

function DirectionTurn()
{
	this.direction = -this.direction;
}

function BeginDive( t )
{
	if (this.motion != this.u.CA + 8)
	{
		this.PlaySE(3601);
		this.count = t;
		this.LabelClear();
		this.SetMotion(this.u.CA + 8, 0);
		this.vx = 0.0;
		this.stateLabel = this.u.Dive;
		this.SetEndMotionCallbackFunction(this.u.DivetoHide);
		return false;
	}

	return true;
}

function Dive()
{
}

function DivetoHide()
{
	if (this.motion != this.u.CA + 7)
	{
		this.LabelClear();
		this.SetMotion(this.u.CA + 7, 0);

		if (this.target in this.actor)
		{
			this.flag1 = 100 + this.rand() % 100;
			this.flag2 = 1;

			if (this.actor[this.target].x - this.x > 0.0)
			{
				this.vx = 10.0;
			}
			else
			{
				this.vx = -10.0;
			}
		}
		else
		{
			this.vx = 0.0;
		}

		this.stateLabel = this.u.Hide;
		this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
	}
}

function BeginHide( t )
{
	if (this.motion != this.u.CA + 7)
	{
		this.LabelClear();
		this.count = t;
		this.SetMotion(this.u.CA + 7, 0);

		if (this.target in this.actor)
		{
			this.flag1 = 100 + this.rand() % 100;
			this.flag2 = 1;

			if (this.actor[this.target].x - this.x > 0.0)
			{
				this.vx = 10.0;
			}
			else
			{
				this.vx = -10.0;
			}
		}
		else
		{
			this.vx = 0.0;
		}

		this.stateLabel = this.u.Hide;
		this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
	}
}

function Hide()
{
	this.count--;

	if (this.target in this.actor)
	{
		if (this.Abs(this.actor[this.target].x - this.x) <= this.flag1)
		{
			if (this.flag2 == 0)
			{
				this.vx = 0.0;
				this.u.BeginPop.call(this);
				return true;
			}

			if (this.flag2 == 1)
			{
				this.flag2 = 2;
			}
		}
		else if (this.flag2 == 2)
		{
			this.vx = 0.0;
			this.u.BeginPop.call(this);
			return true;
		}
	}

	if (this.count <= 0)
	{
		this.u.BeginPop.call(this);
	}
}

function BeginPop()
{
	if (this.motion != this.u.CA + 9)
	{
		this.PlaySE(3600);
		this.count = 0;
		this.LabelClear();
		this.SetMotion(this.u.CA + 9, 0);
		this.vx = 0.0;

		if (this.target in this.actor)
		{
			this.direction = this.actor[this.target].x - this.x > 0.0 ? 1.0 : -1.0;
		}

		this.stateLabel = function ()
		{
			if (this.keyTake == 0)
			{
				if (this.hitBottom)
				{
					this.SetMotion(this.u.CA + 9, 1);
				}
			}
		};
		this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
	}
}

function ForceDead()
{
	if (this.life > 0)
	{
		this.life = 0;
		this.LabelClear();
		this.SetMotion(this.u.CA + 19, 0);
		this.vx = 0.0;
		this.vy = 0.0;
		this.red = 0.5;
		this.blue = 0.5;
		this.green = 0.5;
		this.stateLabel = this.u.Dead_Update;
	}
}

function Dead( t )
{
	this.LabelClear();
	this.SetMotion(this.u.CA + 19, 0);
	this.isAir = true;
	this.direction = t.direction;
	this.vx = 0.0;
	this.vy = 0.0;
	this.red = 0.5;
	this.blue = 0.5;
	this.green = 0.5;
	this.stateLabel = this.u.Dead_Update;
}

function Dead_Smash( t )
{
	this.LabelClear();
	this.SetMotion(this.u.CA + 19, 0);
	this.isAir = true;
	this.direction = t.direction;
	this.vx = 0.0;
	this.vy = 0.0;
	this.red = 0.5;
	this.blue = 0.5;
	this.green = 0.5;
	this.stateLabel = this.u.Dead_Update;
}

function Dead_Update()
{
	if (this.keyTake == 0)
	{
	}
	else
	{
		this.deadCount++;

		if (this.deadCount >= 60)
		{
			this.sx *= 0.92000002;
			this.sy += 0.15000001;
		}
	}

	if (this.deadCount >= 60)
	{
		this.invin = 60;
	}

	if (this.deadCount >= 120)
	{
		this.PlaySE(3004);
		this.Game_DefeatEnemy();
		this.ReleaseActor();
		return;
	}

	this.setG = this.hitG;
}

function Damage_Light( t )
{
	this.hitTable = t;
	this.LabelClear();
	this.aList = [];
	this.SetMotion(this.u.CA + 10, 0);
	this.direction = t.direction;
	this.vx = 0.0;
	this.vy = 0.0;
	this.stateLabel = function ()
	{
		return true;
	};
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
	this.count = 0;
	return false;
}

function Damage_Heavy( t )
{
	this.u.Damage_Light.call(this, t);
}

function Damage_Smash( t )
{
	this.u.Damage_Light.call(this, t);
}

function BeginAttackA( dir )
{
	if (this.flagState & 32)
	{
		this.LabelClear();
		this.HitReset();
		this.count = 30 + this.rand() % 60;
		this.atkCount = 0;
		this.vx = 0.0;
		this.SetMotion(this.u.CA + 20, 0);

		if (dir)
		{
			this.direction = dir;
		}

		this.stateLabel = this.u.UpdateAttackA;
		this.SetEndTakeCallbackFunction(this.KeyActionCheck);
		this.keyAction = [
			null
		];
		this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
		this.vx = 0.0;
		return false;
	}

	return true;
}

function UpdateAttackA()
{
	if (this.keyTake == 1)
	{
		this.count--;

		if (this.count <= 0)
		{
			this.u.AttackA_Fire.call(this);
		}
	}

	if (this.keyTake == 2)
	{
		if (this.Abs(this.vx) <= 0.30000001)
		{
			this.vx = 0.0;
		}
		else
		{
			this.vx -= this.vx > 0.0 ? 0.30000001 : -0.30000001;
		}
	}
}

function AttackA_Fire()
{
	this.SetMotion(this.u.CA + 20, 2);
}

function BeginAttackB( dir )
{
	if (this.flagState & 32)
	{
		this.LabelClear();
		this.fallLabel = this.u.BeginFall;
		this.count = 180 + this.rand() % 60;
		this.atkCount = 0;
		this.SetMotion(this.u.CA + 21, 0);

		if (dir)
		{
			this.direction = dir;
		}

		this.vx = 0.0;
		this.stateLabel = this.u.UpdateAttackB;
		this.SetEndTakeCallbackFunction(this.KeyActionCheck);
		this.keyAction = [
			this.u.AttackB_Fire
		];
		this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
		return false;
	}

	return true;
}

function UpdateAttackB()
{
	if (this.keyTake == 1)
	{
		this.count--;

		if (this.count <= 0)
		{
			this.SetMotion(this.u.CA + 21, 2);
		}
	}

	if (this.keyTake == 2)
	{
		if (this.Abs(this.vx) <= 0.30000001)
		{
			this.vx = 0.0;
		}
		else
		{
			this.vx -= this.vx > 0.0 ? 0.30000001 : -0.30000001;
		}
	}
}

function AttackB_Fire()
{
	this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Init_A1_ThornB, this.DefaultShotTable());
}

function BeginAttackC( time_ )
{
	if (this.flagState & 32)
	{
		this.LabelClear();
		this.fallLabel = this.u.BeginFall;
		this.wallLabel = this.u.BeginFall;
		this.count = time_;
		this.SetMotion(this.u.CA + 22, 0);
		this.u.AttackC_Move.call(this);
		this.stateLabel = this.u.UpdateAttackC;
		this.SetEndTakeCallbackFunction(this.KeyActionCheck);
		this.keyAction = [
			this.u.AttackC_Sit,
			this.u.AttackC_Move,
			this.u.AttackC_Sit,
			this.u.AttackC_Loop
		];
		this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
		return true;
	}
	else
	{
		return false;
	}
}

function UpdateAttackC()
{
	if (this.keyTake <= 3)
	{
		this.count--;
	}

	if (this.keyTake == 1 || this.keyTake == 3 || this.keyTake == 4)
	{
		if (this.Abs(this.vx) <= 0.5)
		{
			this.vx = 0.0;
		}
		else
		{
			this.vx -= this.vx > 0.0 ? 0.5 : -0.5;
		}
	}

	if (this.keyTake == 0 || this.keyTake == 2)
	{
		if (this.Abs(this.vx) <= 0.15000001)
		{
			this.vx = 0.0;
		}
		else
		{
			this.vx -= this.vx > 0.0 ? 0.15000001 : -0.15000001;
		}
	}
}

function AttackC_Sit()
{
	if (this.count <= 0)
	{
		this.SetMotion(this.u.CA + 22, 4);
	}

	this.vx *= 0.75;
}

function AttackC_Move()
{
	this.vx = 7.0 * this.direction * this.sx;
}

function AttackC_Loop()
{
	this.vx = 7.0 * this.direction * this.sx;
	this.SetMotion(this.u.CA + 22, 0);
}

function BeginAttackD( time_ )
{
	if (this.flagState & 32)
	{
		this.LabelClear();
		this.fallLabel = this.u.BeginFall;
		this.count = time_;
		this.atkCount = 0;
		this.SetMotion(this.u.CA + 23, 0);
		this.u.AttackD_MoveFast.call(this);
		this.stateLabel = this.u.UpdateAttackD;
		this.SetEndTakeCallbackFunction(this.KeyActionCheck);
		this.keyAction = [
			this.u.AttackD_Sit,
			this.u.AttackD_Move,
			this.u.AttackD_Sit,
			this.u.AttackD_Loop
		];
		this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
		return true;
	}
	else
	{
		return false;
	}
}

function UpdateAttackD()
{
	if (this.keyTake <= 3)
	{
		this.count--;
	}

	if (this.keyTake == 1 || this.keyTake == 3 || this.keyTake == 4)
	{
		if (this.Abs(this.vx) <= 0.5)
		{
			this.vx = 0.0;
		}
		else
		{
			this.vx -= this.vx > 0.0 ? 0.5 : -0.5;
		}
	}

	if (this.keyTake == 0 || this.keyTake == 2)
	{
		if (this.Abs(this.vx) <= 0.15000001)
		{
			this.vx = 0.0;
		}
		else
		{
			this.vx -= this.vx > 0.0 ? 0.15000001 : -0.15000001;
		}
	}
}

function AttackD_Sit()
{
	if (this.count <= 0)
	{
		this.SetMotion(this.u.CA + 23, 4);
	}
	else
	{
		this.world2d.CreateActor(this.point0_x + this.vx, this.point0_y + this.vy, this.direction, this.Init_A1_ThornD, this.DefaultShotTable());
	}

	this.vx *= 0.75;
}

function AttackD_Move()
{
	this.vx = 7.5 * this.direction * this.sx;
}

function AttackD_MoveFast()
{
	this.vx = 10.0 * this.direction * this.sx;
}

function AttackD_Loop()
{
	this.vx = 7.5 * this.direction * this.sx;
	this.SetMotion(this.u.CA + 23, 0);
}

