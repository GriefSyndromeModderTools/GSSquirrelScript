function Update_Normal()
{
	if (this.life <= 0)
	{
		::StageMainAct.bossLifePer = 0.0;
	}
	else
	{
		::StageMainAct.bossLifePer = this.life.tofloat() / this.lifeMax.tofloat();
	}

	::StageMainAct.bossLv = this.level;

	if (this.UpdateStopCheck())
	{
		return false;
	}

	this.EnemyCommonLoopB();
	this.SetGravity();

	if (this.aList.len() > 0)
	{
		this.u.CPU_aListAction.call(this);
	}
	else
	{
		local Dice_ = this.rand() % 100;

		if (Dice_ <= 50)
		{
			local l = this.ActionData();
			l.script = this.u.RandomTarget;
			this.aList.append(l);
		}
		else
		{
			local l = this.ActionData();
			l.script = this.u.SearchTarget;
			this.aList.append(l);
		}

		local l = this.ActionData();
		l.script = this.u.FreeCheck;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.BeginStand;
		l.time = 480 + this.rand() % 60;
		l.val = 0.0;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.BeginSuffle;
		this.aList.append(l);
	}

	if (this.stateLabel)
	{
		this.stateLabel.call(this);
	}

	if (this.u.rotateUpdate)
	{
		this.u.rotateUpdate.call(this);
		this.u.rotatePosSet.call(this);
	}

	return true;
}

function rotatePosSet()
{
	this.x = this.u.rotatePos.x + this.u.rotateRange * this.cos(this.u.rotateAngle);
	this.y = this.u.rotatePos.y + this.u.rotateRange * this.sin(this.u.rotateAngle);

	if (this.option)
	{
		for( local i = 0; i < this.option.len(); i++ )
		{
			if (this.option[i] in this.actor)
			{
				this.actor[this.option[i]].u.posRotate = this.u.rotateAngle + 3.141592 * 0.5 * (i + 1);
				this.actor[this.option[i]].x = this.u.rotatePos.x + this.u.rotateRange * this.cos(this.actor[this.option[i]].u.posRotate);
				this.actor[this.option[i]].y = this.u.rotatePos.y + this.u.rotateRange * this.sin(this.actor[this.option[i]].u.posRotate);
			}
		}
	}
}

function rotate_Stop()
{
	this.u.rotateSpeed = 0.0;
}

function rotate_Free()
{
	this.u.rotateAngle += this.u.rotateSpeed;
}

function rotate_Normal()
{
	if (this.u.rotateRange < 200.0)
	{
		this.u.rotateRange += 1.0;

		if (this.u.rotateRange > 200.0)
		{
			this.u.rotateRange = 200.0;
		}
	}

	if (this.u.rotateRange > 200.0)
	{
		this.u.rotateRange -= 1.0;

		if (this.u.rotateRange < 200.0)
		{
			this.u.rotateRange = 200.0;
		}
	}

	this.u.rotateSpeed += 0.00050000002;

	if (this.u.rotateSpeed > 0.0099999998)
	{
		this.u.rotateSpeed = 0.0099999998;
	}

	this.u.rotateAngle += this.u.rotateSpeed;
}

function rotate_Normal_Rev()
{
	if (this.u.rotateRange < 200.0)
	{
		this.u.rotateRange += 1.0;

		if (this.u.rotateRange > 200.0)
		{
			this.u.rotateRange = 200.0;
		}
	}

	if (this.u.rotateRange > 200.0)
	{
		this.u.rotateRange -= 1.0;

		if (this.u.rotateRange < 200.0)
		{
			this.u.rotateRange = 200.0;
		}
	}

	this.u.rotateSpeed -= 0.00050000002;

	if (this.u.rotateSpeed < -0.0099999998)
	{
		this.u.rotateSpeed = -0.0099999998;
	}

	this.u.rotateAngle += this.u.rotateSpeed;
}

function rotate_Cross_Normal()
{
	if (this.u.rotateRange < 75.0)
	{
		this.u.rotateRange += 1.0;

		if (this.u.rotateRange > 75.0)
		{
			this.u.rotateRange = 75.0;
		}
	}

	if (this.u.rotateRange > 75.0)
	{
		this.u.rotateRange -= 1.0;

		if (this.u.rotateRange < 75.0)
		{
			this.u.rotateRange = 75.0;
		}
	}

	this.u.rotateSpeed += 0.00050000002;

	if (this.u.rotateSpeed > 0.0049999999)
	{
		this.u.rotateSpeed = 0.0049999999;
	}

	this.u.rotateAngle += this.u.rotateSpeed;
}

function rotate_Cross_Rev()
{
	if (this.u.rotateRange < 125.0)
	{
		this.u.rotateRange += 1.0;

		if (this.u.rotateRange > 125.0)
		{
			this.u.rotateRange = 125.0;
		}
	}

	if (this.u.rotateRange > 125.0)
	{
		this.u.rotateRange -= 1.0;

		if (this.u.rotateRange < 125.0)
		{
			this.u.rotateRange = 125.0;
		}
	}

	this.u.rotateSpeed += 0.00075000001;

	if (this.u.rotateSpeed > 0.0074999998)
	{
		this.u.rotateSpeed = 0.0074999998;
	}

	this.u.rotateAngle += this.u.rotateSpeed;
}

function EndtoFreeMove()
{
	this.LabelClear();
	this.SetMotion(this.u.CA, 0);
	this.stateLabel = this.u.Stand_Update;
}

function BeginStand( dir )
{
	if (this.flagState & 32)
	{
		if (this.motion != this.u.CA)
		{
			this.LabelClear();
			this.SetMotion(this.u.CA, 0);
			this.stateLabel = this.u.Stand_Update;
		}
	}

	return true;
}

function Stand_Update()
{
}

function BattleBegin_Init()
{
	this.LabelClear();
	this.flag1 = 0;
	this.count = 0;
	this.SetMotion(this.u.CA + 40, 0);
	this.vy = 20.0;
	this.PlaySE(4200);
	this.u.rotateUpdate = null;
	this.SetEndTakeCallbackFunction(this.KeyActionCheck);
	this.keyAction = [
		null,
		function ()
		{
			this.PlaySE(4201);
		}
	];
	this.stateLabel = function ()
	{
		switch(this.keyTake)
		{
		case 0:
			this.vy -= 0.5;

			if (this.vy <= 0.0)
			{
				this.u.rotatePos.x = this.x;
				this.u.rotatePos.y = this.y;
				this.u.rotateUpdate = this.u.rotate_Stop;
				this.vy = 0.0;
				this.count++;
			}

			if (this.count >= 60)
			{
				this.count = 0;
				this.SetMotion(this.u.CA + 40, 1);
			}

			break;

		case 3:
			this.count++;

			if (this.flag1 == 0)
			{
				if (this.count == 60)
				{
					this.count = 0;
					this.PlaySE(4202);
					this.flag1 = 210.0;
					this.SetMotion(this.u.CA + 40, 4);
					local t = this.DefaultShotTable();
					t.scale = 2.0;
					this.BlackSmoke_Small_B(this.x, this.y - 60, t);
					this.option = [];
					this.u.rotateUpdate = this.u.rotate_Free;
					local c_ = this.SetActor("dummy1", this.x, this.y, this.direction, this.Init_Boss3_Dummy, this.ActorCommon());
					this.option.append(c_.name);
					c_.u.PosID = 1;
					local c_ = this.SetActor("dummy2", this.x, this.y, this.direction, this.Init_Boss3_Dummy, this.ActorCommon());
					this.option.append(c_.name);
					c_.u.PosID = 2;
					local c_ = this.SetActor("dummy3", this.x, this.y, this.direction, this.Init_Boss3_Dummy, this.ActorCommon());
					this.option.append(c_.name);
					c_.u.PosID = 3;
				}
			}

			break;

		case 4:
		case 5:
			this.u.rotateRange = 210.0 - this.flag1;
			this.flag1 *= 0.92000002;

			if (this.u.rotateRange > 200.0)
			{
				this.u.rotateRange = 200.0;
				this.count++;

				if (this.count >= 60)
				{
					this.u.BeginSuffle.call(this, null);
				}
			}

			this.u.rotateSpeed += 0.00050000002;

			if (this.u.rotateSpeed > 0.5)
			{
				this.u.rotateSpeed = 0.5;
			}

			break;
		}
	};
}

function BeginSuffle( val_ )
{
	this.HitReset();
	this.LabelClear();
	this.u.rotateUpdate = this.u.rotate_Free;
	this.SetMotion(this.u.CA + 1, 0);
	this.PlaySE(4203);
	this.count = 60;
	this.SetEndTakeCallbackFunction(this.KeyActionCheck);
	this.keyAction = [
		null,
		null,
		this.u.SuffleEnd,
		this.u.EndtoFreeMove,
		this.u.EndtoFreeMove,
		this.u.EndtoFreeMove,
		this.u.EndtoFreeMove
	];

	if (this.option)
	{
		for( local i = 0; i < this.option.len(); i++ )
		{
			if (this.option[i] in this.actor)
			{
				this.actor[this.option[i]].u.BeginSuffle.call(this.actor[this.option[i]], null);
			}
		}
	}

	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
	this.stateLabel = function ()
	{
		if (this.keyTake == 1)
		{
			this.count--;

			if (this.count <= 0)
			{
				this.PlaySE(4204);
				this.SetMotion(this.u.CA + 1, 2);
				this.u.rotateUpdate = this.u.rotate_Stop;
				this.u.rotateAngle += 3.141592 * 0.5 * (this.rand() % 4);
			}
		}
		else
		{
		}
	};
	return false;
}

function SuffleEnd()
{
	this.LabelClear();
	this.SetMotion(this.u.CA, 0);
	this.stateLabel = this.u.Stand_Update;
	local R_ = this.rand() % 100;

	if (R_ <= 25)
	{
		this.u.rotateUpdate = this.u.rotate_Normal_Rev;
	}
	else if (R_ <= 50)
	{
		this.u.rotateUpdate = this.u.rotate_Cross_Normal;
	}
	else if (R_ <= 75)
	{
		this.u.rotateUpdate = this.u.rotate_Cross_Rev;
	}
	else
	{
		this.u.rotateUpdate = this.u.rotate_Normal;
	}
}

function BeginAttackA( val_ )
{
	if (this.flagState & 32)
	{
		this.LabelClear();
		this.HitReset();
		this.atkCount = 0;
		this.SetMotion(this.u.CA + 20, 2);
		this.vx = 0.0;
		this.count = 60;
		this.stateLabel = function ()
		{
		};
		this.SetEndTakeCallbackFunction(this.KeyActionCheck);
		this.keyAction = [
			null,
			null,
			this.u.EndtoFreeMove,
			null,
			this.u.EndtoFreeMove,
			null,
			this.u.EndtoFreeMove
		];

		if (this.option)
		{
			for( local i = 0; i < this.option.len(); i++ )
			{
				if (this.option[i] in this.actor)
				{
					this.actor[this.option[i]].u.BeginAttackA.call(this.actor[this.option[i]], null);
				}
			}
		}

		this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
		return false;
	}

	return true;
}

function Dead( t )
{
	this.LabelClear();
	this.aList = [];
	this.SetMotion(this.u.CA + 19, 0);
	this.vx = 0.0;
	this.vy = 0.0;
	this.ox - 0.0;
	this.oy = 0.0;
	this.setG = 0.0;
	this.count = 0;
	this.immuneGravity = true;
	this.stateLabel = this.u.Dead_Update;
	this.u.rotateUpdate = null;

	if (this.option)
	{
		for( local i = 0; i < this.option.len(); i++ )
		{
			if (this.option[i] in this.actor)
			{
				this.actor[this.option[i]].u.Dead.call(this.actor[this.option[i]], null);
			}
		}

		this.option = null;
	}
}

function Dead_Smash( t )
{
	this.u.Dead.call(this, null);
}

function Dead_Update()
{
	this.count++;

	if (this.count >= 90)
	{
		if (this.count == 90)
		{
			this.PlaySE(1021);
		}

		if (this.count % 7 == 0)
		{
			local t = this.DefaultShotTable();
			t.flag1 = this.u.CA;
			t.scale = this.sx;
			this.world2d.CreateActor(this.x + (this.rand() % 21 - 10), this.y, this.direction, this.BossShockEffect, t);
		}

		if (this.red > 0.0099999998)
		{
			this.sx += 0.0020000001;
			this.sy = this.sx;
			this.red -= 0.0049999999;
			this.green = this.red;
			this.blue = this.red;
		}
		else
		{
			this.red = 0.0;
			this.green = this.red;
			this.blue = this.red;
		}

		if (this.count >= 180)
		{
			local t = this.DefaultShotTable();
			t.flag1 = this.count * 7 * 0.017453292;
			t.flag2 = 0.1 + (this.count - 180) * 0.1;
			this.world2d.CreateActor(this.x + (this.rand() % 101 - 50) * t.flag2, this.y, this.direction, this.BossDeathAura, t);
		}
	}

	if (this.isVisible)
	{
		if (this.count >= 300)
		{
			if (this.count == 300)
			{
				this.PlaySE(1022);
			}

			this.vy = -40;
			this.sx *= 0.89999998;
			this.sy += 0.15000001;

			if (this.alpha > 0.050000001)
			{
				this.alpha -= 0.050000001;
			}
			else
			{
				this.isVisible = false;
			}
		}
	}
}

function Damage_Light( t )
{
	this.world2d.CreateActor(this.x + (this.rand() % 101 - 50), this.y - this.rand() % 71, this.direction, this.HitEffect_Blood_G, this.DefaultShotTable());
}

function Damage_Heavy( t )
{
	this.world2d.CreateActor(this.x + (this.rand() % 101 - 50), this.y - this.rand() % 71, this.direction, this.HitEffect_Blood_G, this.DefaultShotTable());
}

function Damage_Smash( t )
{
	this.world2d.CreateActor(this.x + (this.rand() % 101 - 50), this.y - this.rand() % 71, this.direction, this.HitEffect_Blood_G, this.DefaultShotTable());
}

