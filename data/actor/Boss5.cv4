function Update_Normal()
{
	if (this.life <= 0)
	{
		::StageMainAct.bossLifePer = 0.0;
	}
	else
	{
		::StageMainAct.bossLifePer = this.life.tofloat() / this.lifeMax.tofloat();
	}

	::StageMainAct.bossLv = this.level;

	if (this.UpdateStopCheck())
	{
		return false;
	}

	this.EnemyCommonLoopB();
	this.SetGravity();

	if (this.aList.len() > 0)
	{
		this.u.CPU_aListAction.call(this);
	}
	else
	{
		local Dice_ = this.rand() % 100;

		if (Dice_ <= 50)
		{
			local l = this.ActionData();
			l.script = this.u.RandomTarget;
			this.aList.append(l);
		}
		else
		{
			local l = this.ActionData();
			l.script = this.u.SearchTarget;
			this.aList.append(l);
		}

		local l = this.ActionData();
		l.script = this.u.BeginTargetTurn;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.FreeCheck;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.BeginStand;
		l.time = 30 + this.rand() % 30;
		l.val = 0.0;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.CPU_Step;
		this.aList.append(l);
	}

	if (this.stateLabel)
	{
		this.stateLabel.call(this);
	}

	return true;
}

function CPU_Step( val )
{
	local d = this.GetTargetDist();
	local Dice_ = this.rand() % 100;
	this.aList.resize(0);

	if (d != false)
	{
		if (Dice_ <= 50)
		{
			if (Dice_ <= 25)
			{
				local l = this.ActionData();
				l.script = this.u.BeginWalk;
				l.time = 120;
				l.val = -this.direction;
				this.aList.append(l);
			}
			else
			{
				local l = this.ActionData();
				l.script = this.u.BeginRun;
				l.time = 120;
				l.val = -this.direction;
				this.aList.append(l);
			}
		}
		else if (Dice_ <= 75)
		{
			local l = this.ActionData();
			l.script = this.u.BeginWalk;
			l.time = 120;
			l.val = this.direction;
			this.aList.append(l);
		}
		else
		{
			local l = this.ActionData();
			l.script = this.u.BeginRun;
			l.time = 120;
			l.val = this.direction;
			this.aList.append(l);
		}

		local l = this.ActionData();
		l.script = this.u.FreeCheck;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.BeginTargetTurn;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.FreeCheck;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.BeginStand;
		l.time = 60;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.CPU_Attack;
		this.aList.append(l);
	}

	return true;
}

function CPU_Attack( val )
{
	local d = this.GetTargetDist();
	local Dice_ = this.rand() % 100;
	this.aList.resize(0);

	if (this.x <= ::stage.scrollLeft || this.x >= ::stage.scrollRight)
	{
		local l = this.ActionData();
		l.script = this.u.SearchTarget;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.BeginTargetTurn;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.FreeCheck;
		this.aList.append(l);
		local l = this.ActionData();
		l.script = this.u.BeginWalk;
		l.time = 90;
		l.val = this.direction;
		this.aList.append(l);
	}
	else
	{
		if (Dice_ <= 33)
		{
			Dice_ = this.rand() % 100;

			if (Dice_ <= 66)
			{
				local l = this.ActionData();
				l.script = this.u.BeginTargetTurn;
				this.aList.append(l);
				local l = this.ActionData();
				l.script = this.u.FreeCheck;
				this.aList.append(l);
				local l = this.ActionData();
				l.script = this.u.BeginAttackB;
				this.aList.append(l);
				local l = this.ActionData();
				l.script = this.u.FreeCheck;
				this.aList.append(l);
				local l = this.ActionData();
				l.script = this.u.BeginTargetTurn;
				this.aList.append(l);
				local l = this.ActionData();
				l.script = this.u.FreeCheck;
				this.aList.append(l);
				local l = this.ActionData();
				l.script = this.u.BeginAttackB;
				this.aList.append(l);
				local l = this.ActionData();
				l.script = this.u.FreeCheck;
				this.aList.append(l);
				local l = this.ActionData();
				l.script = this.u.BeginTargetTurn;
				this.aList.append(l);
				local l = this.ActionData();
				l.script = this.u.FreeCheck;
				this.aList.append(l);
				local l = this.ActionData();
				l.script = this.u.BeginAttackB;
				this.aList.append(l);
				local l = this.ActionData();
				l.script = this.u.FreeCheck;
				this.aList.append(l);
				return true;
			}
			else
			{
				local l = this.ActionData();
				l.script = this.u.BeginAttackD;
				this.aList.append(l);
				local l = this.ActionData();
				l.script = this.u.FreeCheck;
				this.aList.append(l);
				return true;
			}
		}

		Dice_ = this.rand() % 100;

		if (Dice_ <= 33)
		{
			local l = this.ActionData();
			l.script = this.u.BeginAttackA;
			this.aList.append(l);
		}
		else if (Dice_ <= 66)
		{
			local l = this.ActionData();
			l.script = this.u.BeginAttackB;
			this.aList.append(l);
		}
		else
		{
			local l = this.ActionData();
			l.script = this.u.BeginAttackC;
			this.aList.append(l);
		}
	}

	local l = this.ActionData();
	l.script = this.u.FreeCheck;
	this.aList.append(l);
	return true;
}

function EndtoFreeMove()
{
	this.LabelClear();

	if (this.isAir)
	{
		this.SetMotion(this.u.CA, 0);
	}
	else
	{
		this.stateLabel = this.u.Stand_Update;
		this.SetMotion(this.u.CA, 0);
	}
}

function BeginStand( dir )
{
	if (this.flagState & 32)
	{
		if (this.motion != this.u.CA)
		{
			this.LabelClear();
			this.stateLabel = this.u.Stand_Update;
			this.SetMotion(this.u.CA, 0);
		}

		if (dir)
		{
			this.direction = dir;
		}
	}

	return true;
}

function Stand_Update()
{
	if (this.Abs(this.vx) <= 0.5)
	{
		this.vx = 0.0;
	}
	else
	{
		this.vx -= this.vx > 0.0 ? 0.5 : -0.5;
	}
}

function BeginWalk( dir )
{
	if (this.flagState & 32)
	{
		if (this.motion != this.u.CA + 1)
		{
			this.LabelClear();
			this.flag1 = dir;
			this.SetMotion(this.u.CA + 1, 0);
			this.SetEndTakeCallbackFunction(this.KeyActionCheck);
			this.keyAction = [
				this.u.Walk_Move,
				null,
				null,
				null,
				this.u.EndtoFreeMove,
				this.u.EndtoFreeMove
			];
		}

		this.stateLabel = this.u.Walk_Update;
		return false;
	}

	return true;
}

function Walk_Update()
{
	if (this.keyTake == 1)
	{
		this.vx *= 0.95999998;

		if (this.Abs(this.vx) <= 0.5)
		{
			this.vx = 0.0;
			this.SetMotion(this.u.CA + 1, 4);
		}
	}
}

function Walk_Move()
{
	this.vx = this.flag1 * (15.0 + this.rand() % 70 * 0.1);
}

function BeginRun( dir )
{
	if (this.flagState & 32)
	{
		if (this.motion != this.u.CA + 1)
		{
			this.LabelClear();
			this.flag1 = dir;
			this.flag2 = 120;
			this.SetMotion(this.u.CA + 1, 2);
			this.SetEndTakeCallbackFunction(this.KeyActionCheck);
			this.keyAction = [
				null,
				null,
				null,
				null,
				this.u.EndtoFreeMove,
				this.u.EndtoFreeMove
			];
		}

		this.stateLabel = this.u.Run_Update;
		return false;
	}

	return true;
}

function Run_Update()
{
	if (this.vx < 0 && this.x < ::camera2d.left - 400)
	{
		this.x = ::camera2d.right + 400;
	}

	if (this.vx > 0 && this.x > ::camera2d.right + 400)
	{
		this.x = ::camera2d.left - 400;
	}

	if (this.keyTake == 3)
	{
		this.count++;

		if (this.count % 4 == 0)
		{
			local t = this.DefaultShotTable();
			t.flag1 = this.keyTake;
			this.world2d.CreateActor(this.x, this.y, this.direction, this.Boss5_MoveShadow, t);
		}

		if (this.flag2 > 0)
		{
			this.flag2--;
			this.vx += 1.0 * this.flag1;

			if (this.vx > 80.0)
			{
				this.vx = 80.0;
			}
			else if (this.vx < -80.0)
			{
				this.vx = -80.0;
			}
		}
		else
		{
			this.vx -= 1.0 * this.flag1;

			if (this.Abs(this.vx) <= 1.0)
			{
				this.vx = 0.0;
				this.SetMotion(this.u.CA + 1, 5);
			}
		}
	}
}

function BeginTargetTurn( val )
{
	if (this.target in this.actor)
	{
		local dir_ = 1.0;

		if (this.x > this.actor[this.target].x)
		{
			dir_ = -1.0;
		}

		local t = this.u.BeginTurn.call(this, dir_);

		if (t)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	else
	{
		return false;
	}
}

function BeginTurn( dir )
{
	if (this.flagState & 32)
	{
		if (this.direction != dir)
		{
			if (this.motion != this.u.CA + 4)
			{
				this.LabelClear();
				this.vx = 0.0;
				this.SetMotion(this.u.CA + 4, 0);
				this.SetEndTakeCallbackFunction(this.u.DirectionTurn);
				this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
			}
		}

		return false;
	}

	return true;
}

function DirectionTurn()
{
	this.direction = -this.direction;
	this.SetEndTakeCallbackFunction(null);
}

function BeginAttackA( val_ )
{
	if (this.flagState & 32)
	{
		this.HitReset();
		this.LabelClear();
		this.atkCount = 0;
		this.SetMotion(this.u.CA + 20, 0);
		this.vx = 0.0;
		this.count = 60;
		this.flag1 = 0;
		this.flag2 = 4;
		this.stateLabel = this.u.UpdateAttackA;
		this.SetEndTakeCallbackFunction(this.KeyActionCheck);
		this.keyAction = [
			this.u.AttackA_Crash
		];
		this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
		return false;
	}

	return true;
}

function UpdateAttackA()
{
	if (this.keyTake == 1)
	{
		this.count--;

		if (this.count <= 0)
		{
			if (this.flag1 == 0)
			{
				this.flag1 = 1;
				this.count = 180;
			}
			else
			{
				this.SetMotion(this.u.CA + 20, 2);
			}
		}

		if (this.flag1 == 1)
		{
			if (this.count % 30 == 0 && this.flag2 > 0)
			{
				this.flag2--;
				this.PlaySE(4401);
				this.world2d.CreateActor(this.x - (this.rand() % 200 + 400.0) * this.direction, -100.0, this.direction, this.Boss5_Wheel_A, this.DefaultShotTable());
			}
		}
	}
}

function AttackA_Crash()
{
	this.PlaySE(4400);
}

function BeginAttackB( val_ )
{
	if (this.flagState & 32)
	{
		this.LabelClear();
		this.HitReset();
		this.atkCount = 0;
		this.SetMotion(this.u.CA + 21, 0);
		this.vx = 0.0;
		this.count = 210;
		this.hitEffect = this.HitEffect_Blood;
		this.flag1 = 0;
		this.stateLabel = this.u.UpdateAttackB;
		this.SetEndTakeCallbackFunction(this.KeyActionCheck);
		this.keyAction = [
			null,
			null,
			this.u.AttackB_Crash
		];
		this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
		return false;
	}

	return true;
}

function UpdateAttackB()
{
	if (this.Abs(this.vx) > 0.5)
	{
		this.vx -= this.vx > 0.5 ? 0.5 : -0.5;
	}

	if (this.keyTake == 1)
	{
		if (this.count == 30 || this.count == 90)
		{
			local d_ = this.rand() % 100;

			if (d_ <= 25)
			{
				this.vx = -20.0;
			}
			else if (d_ <= 50)
			{
				this.vx = -10.0;
			}
			else if (d_ <= 75)
			{
				this.vx = 10.0;
			}
			else
			{
				this.vx = 20.0;
			}
		}

		this.count--;

		if (this.count <= 0)
		{
			this.HitReset();
			this.PlaySE(4403);
			this.SetMotion(this.u.CA + 21, 2);
			this.count = 120;
			this.world2d.CreateActor(this.x, this.y, this.direction, this.Boss5_Blade, this.DefaultShotTable());
		}
	}

	if (this.keyTake == 3)
	{
		this.count--;

		if (this.count <= 0)
		{
			this.SetMotion(this.u.CA + 21, 4);
		}
	}
}

function AttackB_Crash()
{
	this.PlaySE(4404);
	this.Set_Vibration(15);
	this.world2d.CreateActor(this.x + 560 * this.direction, this.y, this.direction, this.Boss5_BladeCore, this.DefaultShotTable());
	local t = this.DefaultShotTable();
	t.flag1 = 0;
	this.world2d.CreateActor(this.x + 560 * this.direction, this.y, this.direction, this.Effect_Smoke, t);
	t.scale = 5.0;
}

function BeginAttackC( val_ )
{
	if (this.flagState & 32)
	{
		this.LabelClear();
		this.HitReset();
		this.option = [];
		this.atkCount = 0;
		this.SetMotion(this.u.CA + 22, 0);
		this.vx = 0.0;
		this.count = 240;
		this.flag1 = 10;
		this.stateLabel = this.u.UpdateAttackC;
		this.SetEndTakeCallbackFunction(this.KeyActionCheck);
		this.keyAction = [
			this.u.AttackC_Ready,
			null,
			this.u.AttackC_Attack
		];
		this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
		return false;
	}

	return true;
}

function UpdateAttackC()
{
	if (this.keyTake == 1)
	{
		this.count--;

		if (this.count % 15 == 0 && this.flag1 > 0)
		{
			this.flag1--;
			this.PlaySE(4401);

			if (this.flag1 % 2 == 0)
			{
				local t = this.world2d.CreateActor(this.x + this.rand() % 400 * this.direction, this.y - 200.0 - this.rand() % 500, this.direction, this.Boss5_Wheel_B, this.DefaultShotTable());
				this.option.append(t);
			}
			else
			{
				local t = this.world2d.CreateActor(this.x - this.rand() % 400 * this.direction, this.y - 200.0 - this.rand() % 500, -this.direction, this.Boss5_Wheel_B, this.DefaultShotTable());
				this.option.append(t);
			}
		}

		if (this.count <= 0)
		{
			this.SetMotion(this.u.CA + 22, 2);
			this.count = 0;
		}
	}

	if (this.keyTake == 4)
	{
		this.count--;

		if (this.count <= 0)
		{
			this.SetMotion(this.u.CA + 22, 5);
			this.count = 0;
		}
	}
}

function AttackC_Ready()
{
	this.PlaySE(4400);
}

function AttackC_Attack()
{
	this.PlaySE(4403);
	this.count = 150;

	foreach( a in this.option )
	{
		if (a != null)
		{
			if (a.func != null)
			{
				a.func.call(a);
			}
		}
	}
}

function BeginAttackD( val_ )
{
	if (this.flagState & 32)
	{
		this.LabelClear();
		this.HitReset();
		this.atkCount = 0;
		this.SetMotion(this.u.CA + 23, 0);
		this.vx = 0.0;
		this.flag1 = 0;
		this.flag2 = 20;
		this.flag3 = 0.0;
		this.count = 120;
		this.stateLabel = this.u.UpdateAttackD;
		this.SetEndTakeCallbackFunction(this.KeyActionCheck);
		this.keyAction = [
			this.u.AttackD_Attack
		];
		this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
		this.ox = 0;
		this.oy = -500;
		return false;
	}

	return true;
}

function UpdateAttackD()
{
	if (this.Abs(this.vx) > 0.5)
	{
		this.vx -= this.vx > 0.5 ? 0.5 : -0.5;
	}
	else
	{
		this.vx = 0.0;
	}

	if (this.keyTake == 1)
	{
		this.count--;

		if (this.flag1 == 0)
		{
			::StageMainAct.bossAtackable = false;
			this.flag3 += 0.02;
			this.sx = 1.0 - this.sin(this.flag3) * 0.25;
			this.sy = this.sx;
			this.red = this.sx;
			this.green = this.red;
			this.blue = this.red;

			if (this.flag3 >= 3.141592 * 0.5)
			{
				this.flag1 = 1;
			}
		}

		if (this.flag1 == 1)
		{
			if (this.count <= 0)
			{
				this.flag1 = 2;
				this.count = 600;
			}
		}

		if (this.flag1 == 2)
		{
			if (this.count % 20 == 0 && this.flag2 > 0)
			{
				this.flag2--;
				local t = this.world2d.CreateActor(this.camera2d.left + this.rand() % 800, this.camera2d.top - 200, this.direction, this.Boss5_Wheel_C, this.DefaultShotTable());
			}

			if (this.count <= 0)
			{
				this.flag1 = 3;
			}
		}

		if (this.flag1 == 3)
		{
			this.flag3 -= 0.02;
			this.sx = 1.0 - this.sin(this.flag3) * 0.25;
			this.sy = this.sx;
			this.red = this.sx;
			this.green = this.red;
			this.blue = this.red;

			if (this.flag3 <= 0.0)
			{
				this.sx = 1.0;
				this.sy = this.sx;
				this.red = 1.0;
				this.green = this.red;
				this.blue = this.red;
				this.SetMotion(6923, 2);
				::StageMainAct.bossAtackable = true;
			}
		}
	}
}

function AttackD_Attack()
{
}

function BattleBegin_Init()
{
	this.LabelClear();
	this.isAir = true;
	this.immuneGravity = true;
	this.SetMotion(this.u.CA + 40, 0);
	this.vx = 0.0;
	this.vy = 0.32499999;
	this.count = 0;
	this.SetEndMotionCallbackFunction(this.u.EndtoFreeMove);
	this.stateLabel = function ()
	{
		if (this.keyTake == 1)
		{
			this.count++;

			if (this.y > 640)
			{
				this.SetMotion(this.u.CA + 40, 2);
				this.vy = 0.0;
			}
		}
	};
}

function Dead( t )
{
	this.LabelClear();
	this.aList = [];
	this.SetMotion(this.u.CA + 19, 0);
	this.vx = 0.0;
	this.vy = 0.0;
	this.ox - 0.0;
	this.oy = 0.0;
	this.setG = 0.0;
	this.count = 0;
	this.immuneGravity = true;
	this.stateLabel = this.u.Dead_Update;
}

function Dead_Smash( t )
{
	this.u.Dead.call(this, null);
}

function Dead_Update()
{
	this.count++;

	if (this.count >= 90)
	{
		if (this.count == 90)
		{
			this.PlaySE(1021);
		}

		if (this.count % 7 == 0)
		{
			local t = this.DefaultShotTable();
			t.flag1 = this.u.CA;
			t.scale = this.sx;
			this.world2d.CreateActor(this.x + (this.rand() % 21 - 10), this.y, this.direction, this.BossShockEffect, t);
		}

		if (this.red > 0.0099999998)
		{
			this.sx += 0.0020000001;
			this.sy = this.sx;
			this.red -= 0.0049999999;
			this.green = this.red;
			this.blue = this.red;
		}
		else
		{
			this.red = 0.0;
			this.green = this.red;
			this.blue = this.red;
		}

		if (this.count >= 180)
		{
			local t = this.DefaultShotTable();
			t.flag1 = this.count * 7 * 0.017453292;
			t.flag2 = 0.1 + (this.count - 180) * 0.1;
			this.world2d.CreateActor(this.x + (this.rand() % 101 - 50) * t.flag2, this.y, this.direction, this.BossDeathAura, t);
		}
	}

	if (this.isVisible)
	{
		if (this.count >= 300)
		{
			if (this.count == 300)
			{
				this.PlaySE(1022);
			}

			this.vy = -40;
			this.sx *= 0.89999998;
			this.sy += 0.15000001;

			if (this.alpha > 0.050000001)
			{
				this.alpha -= 0.050000001;
			}
			else
			{
				this.isVisible = false;
			}
		}
	}
}

function DeadBound()
{
}

function Damage_Light( t )
{
}

function Damage_Heavy( t )
{
}

function Damage_Smash( t )
{
}

