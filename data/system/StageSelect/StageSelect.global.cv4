this.CompileFile("data/system/Component/common.nut", this);
this.CompileFile("data/system/Component/Selector.nut", this);
class this.Point2D 
{
	constructor( _left = 0, _top = 0 )
	{
		this.left = _left;
		this.top = _top;
		this.vx = (this.rand() % 10000 / 10000.0 - 0.5) * (this.rand() % 4 + 2);
		this.vy = (this.rand() % 10000 / 10000.0 - 0.5) * (this.rand() % 4 + 2);
		this.offsetX = (this.rand() % 10000 / 10000.0 - 0.5) * (this.rand() % 15);
		this.offsetY = (this.rand() % 10000 / 10000.0 - 0.5) * (this.rand() % 15);
	}

	function _get( _slot )
	{
		if (_slot == "x")
		{
			return this.left.tofloat() + this.offsetX.tofloat();
		}

		if (_slot == "y")
		{
			return this.top.tofloat() + this.offsetY.tofloat();
		}

		return ::_get(_slot);
	}

	left = 0;
	top = 0;
	offsetX = 0;
	offsetY = 0;
	vx = 0;
	vy = 0;
	frame = 0;
	alpha = 1.0;
	imageIndex = 0;
	cursorIndex = -1;
}

function OnCreate()
{
	this.thisAct.openStageThreshold <- 6;
	this.thisAct.SelectCharactor <- [
		-1,
		-1,
		-1
	];
	this.thisAct.DefaultCharactor <- [
		2,
		1,
		3
	];
	this.thisAct.entryCount <- 0;
	this.thisAct.lastStage <- 0;
	this.thisAct.prevStageResult <- null;
	this.thisAct.useMeganeHomura <- false;
}

function Init()
{
	this.frame <- 0;
	this.stageIndexMap <- [];

	for( local i = 0; i < ::gameData.stageResult.len(); i++ )
	{
		if (i == 0 || ::gameData.stageResult[i].state >= 1)
		{
			this.stageIndexMap.append(i);
		}
	}

	this.selector <- this.CreateSelector(this.stageIndexMap.len());
	this.selector.isHorz = true;
	this.selector.intervalWait = 15;
	local lastStage = this.thisAct.lastStage - 1;

	if (this.thisAct.prevStageResult == null)
	{
		if (lastStage >= 0)
		{
			this.selector.cursor = lastStage;
		}
		else
		{
			this.selector.cursor = this.stageIndexMap.len() - 1;
		}
	}
	else
	{
		this.selector.cursor = lastStage;

		if (this.selector.cursor < 0)
		{
			this.selector.cursor = this.stageIndexMap.len() - 1;
		}

		local selIndex = 0;

		for( local i = 0; i < ::gameData.stageResult.len(); i++ )
		{
			if (i == 0 || ::gameData.stageResult[i].state >= 1)
			{
				if (::gameData.stageResult[i].state != this.thisAct.prevStageResult[i].state)
				{
					this.selector.cursor = selIndex;
				}

				selIndex++;
			}
		}
	}

	if (this.selector.cursor >= this.stageIndexMap.len())
	{
		this.selector.cursor = this.stageIndexMap.len() - 1;
	}

	if (this.selector.cursor < 0)
	{
		this.selector.cursor = this.stageIndexMap.len() - 1;
	}

	this.stageFaderAlpha <- 0.0;
	this.scrollFlag <- false;
	this.stageSelectAlpha <- 1.0;
	this.characterSelectAlpha <- 0.0;
	this.focusExitItem <- false;
	this.exitAcceptYes <- false;
	this.sel_charactor <- [];
	this.player_state <- [];

	for( local i = 0; i < this.inputArray.len(); i++ )
	{
		local selector = this.CreateSelector(5);
		selector.isHorz = true;
		selector.intervalWait = 15;
		selector.input = this.inputArray[i].weakref();
		this.sel_charactor.append(selector);
		this.player_state.append(0);
	}

	this.use_charactor <- [
		null,
		null,
		null
	];
	this.funcUpdate <- this.Update_StageSelect;
	this.bgImage <- [
		[
			this.pictureA1,
			this.pictureA1
		],
		[
			this.pictureB1,
			this.pictureB1
		],
		[
			this.pictureC1,
			this.pictureC1
		],
		[
			this.pictureD1,
			this.pictureD1
		],
		[
			this.pictureE1,
			this.pictureE1
		],
		[
			this.pictureA2,
			this.pictureA2
		],
		[
			this.pictureB2,
			this.pictureB2
		],
		[
			this.pictureC2,
			this.pictureC2
		],
		[
			this.pictureD2,
			this.pictureD2
		],
		[
			this.pictureE2,
			this.pictureE2
		],
		[
			this.exitB,
			this.exitB
		]
	];
	this.bgPanel <- [];

	for( local i = 0; i < this.bgImage.len(); i++ )
	{
		this.bgPanel.append(this.Point2D());
	}

	this.stageImage <- [];
	local stageImageMaster = [
		[
			this.resource.stage1A,
			this.resource.stage1B,
			this.stage1B
		],
		[
			this.resource.stage2A,
			this.resource.stage2B,
			this.stage2B
		],
		[
			this.resource.stage3A,
			this.resource.stage3B,
			this.stage3B
		],
		[
			this.resource.stage4A,
			this.resource.stage4B,
			this.stage4B
		],
		[
			this.resource.stage5A,
			this.resource.stage5B,
			this.stage5B
		],
		[
			this.resource.stage6A,
			this.resource.stage6B,
			this.stage6B
		]
	];

	for( local i = 0; i < stageImageMaster.len(); i++ )
	{
		stageImageMaster[i][2].visible = false;
	}

	for( local i = 0; i < this.stageIndexMap.len(); i++ )
	{
		this.stageImage.append(stageImageMaster[this.stageIndexMap[i]]);
		stageImageMaster[this.stageIndexMap[i]][2].visible = true;
	}

	this.stagePanel <- [];

	for( local i = 0; i < this.stageImage.len(); i++ )
	{
		this.stagePanel.append(this.Point2D(this.stageImage[i][2].dst_x, this.stageImage[i][2].dst_y));
		this.stagePanel[i].offsetY *= 0.75;
		this.stagePanel[i].vy *= 0.75;
	}

	this.charactorImage <- [
		[
			this.resource.homura_A,
			this.resource.homura_B,
			this.resource.homura_C
		],
		[
			this.resource.kyouko_A,
			this.resource.kyouko_B,
			this.resource.kyouko_C
		],
		[
			this.resource.madoka_A,
			this.resource.madoka_B,
			this.resource.madoka_C
		],
		[
			this.resource.mami_A,
			this.resource.mami_B,
			this.resource.mami_C
		],
		[
			this.resource.sayaka_A,
			this.resource.sayaka_B,
			this.resource.sayaka_C
		],
		[
			this.resource.M_homura_A,
			this.resource.M_homura_B,
			this.resource.M_homura_C
		]
	];
	this.cursorImage <- [
		this.resource.c1p,
		this.resource.c2p,
		this.resource.c3p
	];
	this.cursorImageG <- [
		this.resource.c1pG,
		this.resource.c2pG,
		this.resource.c3pG
	];
	this.charactorPanel <- [
		this.Point2D(25, 30),
		this.Point2D(175, 30),
		this.Point2D(325, 30),
		this.Point2D(475, 30),
		this.Point2D(625, 30)
	];

	for( local i = 0; i < this.charactorPanel.len(); i++ )
	{
		this.charactorPanel[i].offsetY = -600;
	}

	this.condition <- [
		::playerData.homura.condition,
		::playerData.kyouko.condition,
		::playerData.madoka.condition,
		::playerData.mami.condition,
		::playerData.sayaka.condition
	];
	this.meganeHomuraLineFlag <- [];
	this.meganeHomuraLineIndex <- [];
	this.meganeHomuraLineIndexIndex <- 0;
	this.meganeHomuraAlpha <- 0.0;

	for( local i = 0; i < 128; i++ )
	{
		this.meganeHomuraLineFlag.append(false);
		this.meganeHomuraLineIndex.append(i);
	}

	for( local i = 127; i >= 1; i-- )
	{
		local index = this.rand() % i;
		local tmp = this.meganeHomuraLineIndex[index];
		this.meganeHomuraLineIndex[index] = this.meganeHomuraLineIndex[i];
		this.meganeHomuraLineIndex[i] = tmp;
	}

	::EnableInput(true);

	if (this.GetBgmName() != "data/bgm/mdk_title.ogg")
	{
		this.StopBgm(0);
		this.PlayBgm("data/bgm/mdk_title.ogg", 0, 100);
	}
}

function Update()
{
	this.PreUpdate();

	if (this.funcUpdate)
	{
		this.funcUpdate();
	}

	this.PostUpdate();
}

function PreUpdate()
{
	this.frame++;
	this.hook_shadow.layout.roll_z = this.sin(this.frame / 8.0 * 3.1415927 / 180.0) * 45.0;

	for( local i = 0; i < this.bgPanel.len() - (this.focusExitItem ? 1 : 0); i++ )
	{
		local panel = this.bgPanel[i];
		panel.offsetX += panel.vx / 30.0;
		panel.offsetY += panel.vy / 30.0;

		if (this.frame % 30 == 0)
		{
			panel.vx += -panel.offsetX * 0.001;
			panel.vy += -panel.offsetY * 0.003;
		}
	}

	for( local i = 0; i < this.bgPanel.len(); i++ )
	{
		local panel = this.bgPanel[i];
		this.bgImage[i][1].dst_x = this.bgImage[i][0].dst_x;
		this.bgImage[i][1].dst_y = this.bgImage[i][0].dst_y;
		local img = this.bgImage[i][0];
		img.dst_x = img.ox + panel.offsetX;
		img.dst_y = img.oy + panel.offsetY;
	}

	for( local i = 0; i < this.stagePanel.len(); i++ )
	{
		if (i == this.selector.cursor)
		{
		}
		else
		{
			local panel = this.stagePanel[i];
			panel.offsetX += panel.vx / 10.0;
			panel.offsetY += panel.vy / 10.0;

			if (this.frame % 10)
			{
				panel.vx += -panel.offsetX * 9.9999997e-005;
				panel.vy += -panel.offsetY * 0.00030000001;
			}

			local img = this.stageImage[i][1];
			local panel = this.stagePanel[i];
			local dst_x = panel.left + panel.offsetX / 2.0;
			local dst_y = panel.top + panel.offsetY / 2.0;

			if (dst_y >= 278)
			{
				dst_y = 278;
			}

			this.stageImage[i][2].dst_x = dst_x;
			this.stageImage[i][2].dst_y = dst_y;
		}
	}

	this.pl.SetBlend(this.BLEND_ALPHA, 0.15000001);
	this.pl.StretchBlt(-150, 0, 1100, 600, this.resource.frontwall, 0, 0, 800, 443);
	this.pl.SetBlend(this.BLEND_ADD, 0.5);
	this.pl.StretchBlt(-150, 0, 1100, 600, this.resource.front_grad, 0, 0, 1, 600);

	if (this.focusExitItem)
	{
		local img = this.resource.exit;
		local panel = this.bgPanel[10];
		this.pl.BitBlt(this.exitB.dst_x, this.exitB.dst_y, img.image_width, img.image_height, img, 0, 0, this.BLEND_ALPHA, 1.0);
		img = this.resource.cexit;
		this.pl.BitBlt(this.exitB.dst_x + 50, this.exitB.dst_y + 100, img.image_width, img.image_height, img, 0, 0, this.BLEND_ALPHA, 1.0);
	}
	else
	{
		local img = this.stageImage[this.selector.cursor][0];
		local panel = this.stagePanel[this.selector.cursor];
		this.pl.BitBlt(panel.left + panel.offsetX / 3.0, panel.top + panel.offsetY / 3.0, img.image_width, img.image_height, img, 0, 0, this.BLEND_ALPHA, 1.0);
		img = this.resource.cstage;
		this.pl.BitBlt(panel.left + panel.offsetX / 3.0 + 220, panel.top + panel.offsetY / 3.0 + 140, img.image_width, img.image_height, img, 0, 0, this.BLEND_ALPHA, 1.0);
	}

	local img = this.resource.Stage_select;
	this.pl.BitBlt((800 - img.image_width) / 2.0, 536, img.image_width, img.image_height, img, 0, 0, this.BLEND_ALPHA, this.stageSelectAlpha);
	this.pl.SetBlend(this.BLEND_ALPHA, this.stageFaderAlpha);
	this.pl.StretchBlt(-150, -10, 1100, 620, this.resource.black_dot, 0, 0, 1, 1);
	local offsetX = this.thisAct.pl.offsetX;

	for( local i = 0; i < this.charactorPanel.len(); i++ )
	{
		local panel = this.charactorPanel[i];
		local imageArray = this.charactorImage[i];

		if (this.condition[i] != 0)
		{
			local img = imageArray[2];
			this.pl.BitBlt(panel.x - offsetX, panel.y, img.image_width, img.image_height, img, 0, 0, this.BLEND_ALPHA, 1.0 - this.fabs(panel.offsetY) / 300.0);
		}
		else if (panel.imageIndex >= 10)
		{
			local img = imageArray[1];
			this.pl.BitBlt(panel.x - offsetX, panel.y, img.image_width, img.image_height, img, 0, 0, this.BLEND_ALPHA, 1.0 - this.fabs(panel.offsetY) / 300.0);
		}
		else
		{
			local img = imageArray[panel.imageIndex];
			this.pl.BitBlt(panel.x - offsetX, panel.y, img.image_width, img.image_height, img, 0, 0, this.BLEND_ALPHA, 1.0 - this.fabs(panel.offsetY) / 300.0);
		}

		if (i == 0)
		{
			imageArray = this.charactorImage[5];
			local img;

			if (this.condition[i] != 0)
			{
				img = imageArray[2];
			}
			else if (panel.imageIndex >= 10)
			{
				img = imageArray[1];
			}
			else
			{
				img = imageArray[panel.imageIndex];
			}

			for( local x = 0; x < this.meganeHomuraLineFlag.len(); x++ )
			{
				if (this.meganeHomuraLineFlag[x])
				{
					this.pl.BitBlt(panel.x - offsetX + x, panel.y, 1, img.image_height, img, x, 0, this.BLEND_ALPHA, 1.0 - this.fabs(panel.offsetY) / 300.0);
				}
			}

			for( local j = 0; j < 4; j++ )
			{
				local index = this.meganeHomuraLineIndex[this.meganeHomuraLineIndexIndex];
				this.meganeHomuraLineFlag[index] = this.thisAct.useMeganeHomura;
				this.meganeHomuraLineIndexIndex = (this.meganeHomuraLineIndexIndex + (this.thisAct.useMeganeHomura ? 1 : -1) + this.meganeHomuraLineIndex.len()) % this.meganeHomuraLineIndex.len();
			}
		}

		if (panel.cursorIndex >= 0)
		{
			local alpha = 1.0;

			if (this.player_state[panel.cursorIndex] == 2)
			{
				local img = this.cursorImage[panel.cursorIndex];
				this.pl.BitBlt(panel.x + 56 - offsetX, panel.y + 360, img.image_width, img.image_height, img, 0, 0, this.BLEND_ALPHA, (1.0 - this.fabs(panel.offsetY) / 300.0) * alpha);
			}
			else
			{
				local img = this.cursorImageG[panel.cursorIndex];
				this.pl.BitBlt(panel.x + 56 - offsetX, panel.y + 360, img.image_width, img.image_height, img, 0, 0, this.BLEND_ALPHA, (1.0 - this.fabs(panel.offsetY) / 300.0) * alpha);
			}
		}
	}

	local img = this.resource.Character_select;
	this.pl.BitBlt((800 - img.image_width) / 2.0, 536, img.image_width, img.image_height, img, 0, 0, this.BLEND_ALPHA, this.characterSelectAlpha);
}

function PostUpdate()
{
}

function Update_StageSelect()
{
	if (this.stageFaderAlpha > 0.0)
	{
		this.stageFaderAlpha -= 0.025;
	}

	if (this.focusExitItem)
	{
		if (this.inputAll.y < 0)
		{
			this.PlaySE(0);
			this.focusExitItem = false;
		}
		else if (this.inputAll.b0 == 1)
		{
			this.PlaySE(1);
			this.FaderAct.FadeOut(60, 0, function ()
			{
				this.pl.EndStage();
				this.TitleAct.pl.BeginStage(0);
			}.bindenv(this));
			this.funcUpdate = null;
		}

		return;
	}
	else if (this.inputAll.y > 0)
	{
		this.PlaySE(0);
		this.focusExitItem = true;
		return;
	}

	this.selector.Update();

	if (this.selector.cursor != this.selector.cursorPrev)
	{
		this.PlaySE(0);
	}

	for( local i = 0; i < this.inputArray.len(); i++ )
	{
		this.player_state[i] = 0;
	}

	for( local i = 0; i < this.inputArray.len(); i++ )
	{
		if (this.inputArray[i].b0 == 1)
		{
			this.PlaySE(1);

			for( local j = 0; j < 3; j++ )
			{
				if (this.thisAct.SelectCharactor[j] >= 0)
				{
					this.player_state[j] = 1;
					this.sel_charactor[j].cursor = this.thisAct.SelectCharactor[j];

					if (this.sel_charactor[j].cursor < 0)
					{
						this.sel_charactor[j].cursor = this.thisAct.DefaultCharactor[j];
					}

					this.charactorPanel[this.sel_charactor[j].cursor].imageIndex = 1;
					this.charactorPanel[this.sel_charactor[j].cursor].cursorIndex = j;
				}
			}

			this.player_state[i] = 1;
			this.sel_charactor[i].cursor = this.thisAct.SelectCharactor[i];

			if (this.sel_charactor[i].cursor < 0)
			{
				this.sel_charactor[i].cursor = this.thisAct.DefaultCharactor[i];
			}

			this.charactorPanel[this.sel_charactor[i].cursor].imageIndex = 1;
			this.charactorPanel[this.sel_charactor[i].cursor].cursorIndex = i;
			this.funcUpdate = this.Update_CharactorSelectEnter;
			this.charactorPanel[0].frame = -10;
			this.charactorPanel[0].offsetY = -600;
			this.charactorPanel[1].frame = -5;
			this.charactorPanel[1].offsetY = -600;
			this.charactorPanel[2].frame = 0;
			this.charactorPanel[2].offsetY = -600;
			this.charactorPanel[3].frame = -5;
			this.charactorPanel[3].offsetY = -600;
			this.charactorPanel[4].frame = -10;
			this.charactorPanel[4].offsetY = -600;
			break;
		}
	}

	if (this.stageSelectAlpha < 1.0)
	{
		this.stageSelectAlpha += 0.02;
	}

	if (this.characterSelectAlpha > 0.0)
	{
		this.characterSelectAlpha -= 0.02;
	}
}

function Update_CharactorSelectEnter()
{
	if (this.stageFaderAlpha < 0.5)
	{
		this.stageFaderAlpha += 0.025;
	}

	local actualed = 0;

	for( local i = 0; i < this.charactorPanel.len(); i++ )
	{
		local panel = this.charactorPanel[i];

		if (panel.frame >= 0 && panel.frame <= 45)
		{
			local per = 1.0 - panel.frame / 45.0;
			panel.offsetY = this.cos(panel.frame * 2.0 * 3.141592 / 180.0) * -500.0 * per;

			if (panel.offsetY > 0)
			{
				panel.offsetY *= 0.1;
			}
		}

		if (++panel.frame > 45)
		{
			actualed++;
		}
	}

	if (actualed >= 5)
	{
		this.funcUpdate = this.Update_CharactorSelect;
	}

	if (this.stageSelectAlpha > 0.0)
	{
		this.stageSelectAlpha -= 0.02;
	}

	if (this.characterSelectAlpha < 1.0)
	{
		this.characterSelectAlpha += 0.02;
	}
}

function Update_CharactorSelectLeave()
{
	if (this.stageFaderAlpha > 0.0)
	{
		this.stageFaderAlpha -= 0.0099999998;
	}

	local actualed = 0;

	for( local i = 0; i < this.charactorPanel.len(); i++ )
	{
		local panel = this.charactorPanel[i];

		if (panel.frame >= 0 && panel.frame <= 45)
		{
			local per = 1.0 - panel.frame / 45.0;
			panel.offsetY = this.cos(panel.frame * 2.0 * 3.141592 / 180.0) * -500.0 * per;

			if (panel.offsetY > 0)
			{
				panel.offsetY *= 0.1;
			}
		}

		if (--panel.frame < 0)
		{
			actualed++;
		}
	}

	if (actualed >= 5)
	{
		this.funcUpdate <- this.Update_StageSelect;
	}

	if (this.stageSelectAlpha < 1.0)
	{
		this.stageSelectAlpha += 0.02;
	}

	if (this.characterSelectAlpha > 0.0)
	{
		this.characterSelectAlpha -= 0.02;
	}
}

function Update_CharactorSelect()
{
	for( local i = 0; i < this.charactorPanel.len(); i++ )
	{
		local panel = this.charactorPanel[i];
		panel.imageIndex = 0;
		panel.cursorIndex = -1;
	}

	local deadCount = 0;

	for( local i = 0; i < this.condition.len(); i++ )
	{
		if (this.condition[i] != 0)
		{
			deadCount++;
		}
	}

	local activePlayer = 0;
	local standbyCount = 0;

	for( local i = 0; i < this.inputArray.len(); i++ )
	{
		if (this.player_state[i] == 1 || this.player_state[i] == 2)
		{
			activePlayer++;
		}

		if (this.player_state[i] == 2)
		{
			standbyCount++;
		}
	}

	local enableQB = 5 - deadCount <= standbyCount;
	local seID = -1;

	for( local i = 0; i < this.inputArray.len(); i++ )
	{
		local selector = this.sel_charactor[i];
		this.use_charactor[i] = null;

		if (this.player_state[i] == 0)
		{
			if (selector.input.b0 == 1)
			{
				seID = 1;
				this.player_state[i] = 1;
				selector.cursor = this.thisAct.SelectCharactor[i];

				if (selector.cursor < 0)
				{
					selector.cursor = this.thisAct.DefaultCharactor[i];
				}

				local delta = selector.input.x > 0 ? 1 : -1;

				for( local j = 0; j < 3; j++ )
				{
					if (i != j && this.player_state[j] != 0 && this.sel_charactor[j].cursor == selector.cursor)
					{
						selector.cursor = (selector.cursor + 1) % 5;
						j = -1;
					}
				}
			}
		}
		else if (this.player_state[i] == 2)
		{
			local panel = this.charactorPanel[selector.cursor];
			panel.imageIndex = 10;
			panel.cursorIndex = i;

			if (selector.input.b1 == 1)
			{
				this.PlaySE(2);
				this.player_state[i] = 1;
			}
		}
		else if (this.player_state[i] == 1)
		{
			if (selector.cursor == 0 && this.condition[0] == 0)
			{
				if (!this.thisAct.useMeganeHomura && selector.input.y == -1)
				{
					this.thisAct.useMeganeHomura = true;
					this.PlaySE(51);
				}
				else if (this.thisAct.useMeganeHomura && selector.input.y == 1)
				{
					this.thisAct.useMeganeHomura = false;
					this.PlaySE(51);
				}
			}

			selector.Update();

			if (selector.cursor != selector.cursorPrev)
			{
				this.PlaySE(0);
				local delta = selector.input.x > 0 ? 1 : -1;

				for( local j = 0; j < 3; j++ )
				{
					if (i != j && this.player_state[j] != 0 && this.sel_charactor[j].cursor == selector.cursor)
					{
						local cursorPrev = selector.cursor;
						selector.cursor = selector.cursor + delta;

						if (selector.cursor < 0 || selector.cursor >= 5)
						{
							selector.cursor = selector.cursorPrev;
							break;
						}

						j = -1;
					}
				}
			}

			local panel = this.charactorPanel[selector.cursor];
			panel.imageIndex = 1;
			panel.cursorIndex = i;

			if (selector.input.b0 == 1)
			{
				if (this.condition[selector.cursor] != 0 && !enableQB)
				{
					this.PlaySE(7);
				}
				else
				{
					seID = 1;
					this.player_state[i] = 2;
				}
			}
			else if (selector.input.b1 == 1)
			{
				seID = 2;
				this.player_state[i] = 0;
				return;
			}
		}
	}

	local selectingCount = 0;
	local disabledCount = 0;
	local standbyCount = 0;
	local qbCount = 0;

	for( local i = 0; i < this.inputArray.len(); i++ )
	{
		this.use_charactor[i] = null;

		if (this.player_state[i] == 1)
		{
			selectingCount++;
		}
		else if (this.player_state[i] == 2)
		{
			standbyCount++;
			this.use_charactor[i] = this.sel_charactor[i].cursor;

			if (this.use_charactor[i] == 0 && this.thisAct.useMeganeHomura)
			{
				this.use_charactor[i] = 5;
			}

			if (this.condition[this.sel_charactor[i].cursor] != 0)
			{
				this.use_charactor[i] = 6;
				qbCount++;
			}
		}
		else if (this.player_state[i] == 0)
		{
			disabledCount++;
		}
	}

	if (selectingCount == 0)
	{
		if (standbyCount - qbCount)
		{
			seID = 52;
			this.FaderAct.FadeOut(60, 0, null);
			this.funcUpdate <- this.Update_StartGame;

			for( local x = 0; x < this.meganeHomuraLineFlag.len(); x++ )
			{
				this.meganeHomuraLineFlag[x] = this.thisAct.useMeganeHomura;
			}

			this.StopBgm(3000);
		}
		else if (qbCount)
		{
		}
		else if (disabledCount)
		{
			seID = 2;
			this.funcUpdate <- this.Update_CharactorSelectLeave;
		}
	}

	if (seID >= 0)
	{
		this.PlaySE(seID);
	}

	if (this.stageSelectAlpha > 0.0)
	{
		this.stageSelectAlpha -= 0.02;
	}

	if (this.characterSelectAlpha < 1.0)
	{
		this.characterSelectAlpha += 0.02;
	}
}

function Update_ExitMenu()
{
	if (this.stageFaderAlpha < 0.5)
	{
		this.stageFaderAlpha += 0.052499998;
	}

	if (this.inputAll.b1 == 1)
	{
		this.funcUpdate <- this.Update_StageSelect;
		return;
	}

	if (this.exitAcceptYes)
	{
		this.pl.BitBlt(293, 284, 214, 32, this.resource.yesno, 0, 0, this.BLEND_ALPHA, this.stageFaderAlpha * 2.0);

		if (this.inputAll.x > 0)
		{
			this.PlaySE(0);
			this.exitAcceptYes = false;
		}
		else if (this.inputAll.b0 == 1)
		{
			this.PlaySE(1);
			this.FaderAct.FadeOut(60, 0, function ()
			{
				this.pl.EndStage();
				this.TitleAct.pl.BeginStage(0);
			}.bindenv(this));
		}
	}
	else
	{
		this.pl.BitBlt(293, 284, 214, 32, this.resource.yesno, 0, 32, this.BLEND_ALPHA, this.stageFaderAlpha * 2.0);

		if (this.inputAll.x < 0)
		{
			this.PlaySE(0);
			this.exitAcceptYes = true;
		}
		else if (this.inputAll.b0 == 1)
		{
			this.PlaySE(2);
			this.funcUpdate <- this.Update_StageSelect;
		}
	}
}

function Update_StartGame()
{
	if (this.stageFaderAlpha < 1.0)
	{
		this.stageFaderAlpha += 0.025;
	}

	if (!this.FaderAct.IsFading())
	{
		this.NowLoadingAct.Show(true);

		if (this.NowLoadingAct.global.stopFlag == true)
		{
			this.pl.EndStage();
			this.StartStage(this.stageIndexMap[this.selector.cursor] + 1, this.use_charactor[0], this.use_charactor[1], this.use_charactor[2]);
			this.thisAct.SelectCharactor[0] = this.use_charactor[0] == null ? -1 : this.sel_charactor[0].cursor;
			this.thisAct.SelectCharactor[1] = this.use_charactor[1] == null ? -1 : this.sel_charactor[1].cursor;
			this.thisAct.SelectCharactor[2] = this.use_charactor[2] == null ? -1 : this.sel_charactor[2].cursor;
			this.thisAct.entryCount = (this.use_charactor[0] != null ? 1 : 0) + (this.use_charactor[1] != null ? 1 : 0) + (this.use_charactor[2] != null ? 1 : 0);
			this.thisAct.lastStage = this.stageIndexMap[this.selector.cursor] + 1;
			this.thisAct.prevStageResult <- [];

			for( local i = 0; i < ::gameData.stageResult.len(); i++ )
			{
				this.thisAct.prevStageResult.append(clone ::gameData.stageResult[i]);
			}
		}
	}
}

