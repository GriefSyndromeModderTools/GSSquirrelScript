this.CompileFile("data/system/Component/common.nut", this);
this.CompileFile("data/system/Component/Selector.nut", this);
this.CreateAct("data/system/Title/TitleBG.act");
function OnCreate()
{
}

function Init()
{
	this.frame <- 0;
	this.frontFaderAlpha <- 1.0;

	if (::SaveData.loopNum == 0)
	{
		this.itemImage <- [
			[
				this.menu_start,
				0,
				this.menu_startS
			],
			[
				this.menu_exit,
				2,
				this.menu_exitS
			]
		];
		this.menu_exitS.dst_x = this.menu_exit.dst_x = 515;
		this.menu_exitS.ox = this.menu_exit.ox = 515;
		this.menu_exitS.dst_y = this.menu_exit.dst_y = 330;
		this.menu_exitS.oy = this.menu_exit.oy = 330;
	}
	else
	{
		this.itemImage <- [
			[
				this.menu_start,
				0,
				this.menu_startS
			],
			[
				this.menu_continue,
				1,
				this.menu_continueS
			],
			[
				this.menu_exit,
				2,
				this.menu_exitS
			]
		];
		this.menu_exitS.dst_x = this.menu_exit.dst_x = 535;
		this.menu_exitS.dst_y = this.menu_exit.dst_y = 371;
	}

	this.selector <- this.CreateSelector(this.itemImage.len());
	this.funcUpdate <- this.Update1;
	this.FaderAct.FadeIn(20, 0, function ()
	{
		if (this.GetBgmName() != "data/bgm/mdk_title.ogg")
		{
			this.StopBgm(0);
			this.PlayBgm("data/bgm/mdk_title.ogg", 0, 100);
		}
	}.bindenv(this));
	this.title_back.alpha = 0.0;
	this.TitleBGAct.pl.BeginStage(0);
	class this.CursorPos 
	{
		x = 420;
		tx = 420;
		y = 250;
		ty = 250;
	}

	this.cursor_pos <- this.CursorPos();
	this.lr_anim_frame <- 0;
	this.select_lap <- ::SaveData.lastPlayLap + 1;
	this.select_lap_delay <- 0;
	::EnableInput(true);
}

function Update()
{
	if (this.funcUpdate)
	{
		this.funcUpdate();
	}

	this.frame++;

	if (::SaveData.loopNum == 0)
	{
		this.menu_exitS.dst_x = this.menu_exit.dst_x = 515;
		this.menu_exitS.ox = this.menu_exit.ox = 515;
		this.menu_exitS.dst_y = this.menu_exit.dst_y = 330;
		this.menu_exitS.oy = this.menu_exit.oy = 330;
	}
	else
	{
		this.menu_exitS.dst_x = this.menu_exit.dst_x = 535;
		this.menu_exitS.dst_y = this.menu_exit.dst_y = 371;
	}

	this.title_cloud.dst_x -= 0.5;

	if (this.title_cloud.dst_x <= -800)
	{
		this.title_cloud.dst_x += 800;
	}

	local left = this.high_score.dst_x;
	local top = this.high_score.dst_y;
	this.UtilityAct.DrawNumber14(this.pl, left + 100, top + 6, ::SaveData.scoreRank[0][0], -8, 1.0);

	if (::SaveData.scoreRank[0][1] != null)
	{
		this.pl.BitBlt(left + 223, top + 2, 24, 24, this.resource.face_l, ::SaveData.scoreRank[0][1] * 24, 0, this.BLEND_ALPHA, 1.0);
	}

	if (::SaveData.scoreRank[0][2] != null)
	{
		this.pl.BitBlt(left + 250, top + 10, 16, 16, this.resource.face_s, ::SaveData.scoreRank[0][2] * 16, 0, this.BLEND_ALPHA, 1.0);
	}

	if (::SaveData.scoreRank[0][3] != null)
	{
		this.pl.BitBlt(left + 269, top + 10, 16, 16, this.resource.face_s, ::SaveData.scoreRank[0][3] * 16, 0, this.BLEND_ALPHA, 1.0);
	}

	local left = this.best_time.dst_x;
	local top = this.best_time.dst_y;
	local bestTime = ::SaveData.timeRank[0][0] * 16;
	local msec = bestTime % 1000 / 10;
	local sec = bestTime / 1000 % 60;
	local min = bestTime / 1000 / 60;
	this.DrawNumber("num14x19", left + 170, top + 6, msec, 2, 1.0, 1.0, 1.0);
	this.DrawNumber("num14x19", left + 136, top + 6, sec, 2, 1.0, 1.0, 1.0);
	this.DrawNumber("num14x19", left + 110, top + 6, min, 1, 1.0, 1.0, 1.0);

	if (::SaveData.timeRank[0][1] != null)
	{
		this.pl.BitBlt(left + 223, top + 2, 24, 24, this.resource.face_l, ::SaveData.timeRank[0][1] * 24, 0, this.BLEND_ALPHA, 1.0);
	}

	if (::SaveData.timeRank[0][2] != null)
	{
		this.pl.BitBlt(left + 250, top + 10, 16, 16, this.resource.face_s, ::SaveData.timeRank[0][2] * 16, 0, this.BLEND_ALPHA, 1.0);
	}

	if (::SaveData.timeRank[0][3] != null)
	{
		this.pl.BitBlt(left + 269, top + 10, 16, 16, this.resource.face_s, ::SaveData.timeRank[0][3] * 16, 0, this.BLEND_ALPHA, 1.0);
	}

	local left = this.max_hits.dst_x + 3;
	local top = this.max_hits.dst_y;
	this.UtilityAct.DrawNumber14(this.pl, left + 100, top + 6, ::SaveData.comboRank[0][0], -8, 1.0);

	if (::SaveData.comboRank[0][1] != null)
	{
		this.pl.BitBlt(left + 223, top + 2, 24, 24, this.resource.face_l, ::SaveData.comboRank[0][1] * 24, 0, this.BLEND_ALPHA, 1.0);
	}

	if (::SaveData.comboRank[0][2] != null)
	{
		this.pl.BitBlt(left + 250, top + 10, 16, 16, this.resource.face_s, ::SaveData.comboRank[0][2] * 16, 0, this.BLEND_ALPHA, 1.0);
	}

	if (::SaveData.comboRank[0][3] != null)
	{
		this.pl.BitBlt(left + 269, top + 10, 16, 16, this.resource.face_s, ::SaveData.comboRank[0][3] * 16, 0, this.BLEND_ALPHA, 1.0);
	}

	local left = this.final_lap.dst_x;
	local top = this.final_lap.dst_y;

	if (::SaveData.loopNum < 1)
	{
		this.final_lap.visible = false;
	}
	else
	{
		this.final_lap.visible = true;
		this.UtilityAct.DrawNumber14(this.pl, left + 100, top + 6, ::SaveData.loopNum, -8, 1.0);
	}

	local left = 500;
	local top = 250;
	local line_height = 38;
	this.pl.BitBlt(this.cursor_pos.x, this.cursor_pos.y + 1, 384, 28, this.resource.menu_obi384x28, 0, 0, this.BLEND_ALPHA, 1.0);

	if (::SaveData.loopNum == 0)
	{
		this.pl.BitBlt(left, top + line_height * 0, 256, 32, this.resource.menu_moji256x96, 0, 0, this.BLEND_ALPHA, 1.0);
		this.pl.BitBlt(left, top + line_height * 1, 256, 32, this.resource.menu_moji256x96, 0, 64, this.BLEND_ALPHA, 1.0);
	}
	else
	{
		local lap_digit = 1;
		local tmp_i = this.select_lap;

		while (tmp_i >= 10)
		{
			lap_digit++;
			tmp_i /= 10;
		}

		local lap_left_offset = (lap_digit - 1) * -14;
		this.pl.BitBlt(left, top + line_height * 0, 256, 32, this.resource.menu_moji256x96, 0, 0, this.BLEND_ALPHA, 1.0);
		this.pl.BitBlt(left + lap_left_offset, top + line_height * 1, 150, 32, this.resource.menu_moji256x96, 0, 32, this.BLEND_ALPHA, 1.0);
		this.pl.BitBlt(left + 206, top + line_height * 1, 150, 32, this.resource.menu_moji256x96, 206, 32, this.BLEND_ALPHA, 1.0);
		this.pl.BitBlt(left, top + line_height * 2, 256, 32, this.resource.menu_moji256x96, 0, 64, this.BLEND_ALPHA, 1.0);

		if (this.selector.cursor == 1)
		{
			local dx = this.fabs(this.cos(this.lr_anim_frame * 0.15000001) * 5.0);

			if (this.select_lap >= 2)
			{
				this.pl.BitBlt(left - 31 + lap_left_offset - dx, top + this.selector.cursor * line_height, 32, 32, this.resource.menu_left32x32, 0, 0, this.BLEND_ALPHA, 1.0);
			}

			if (this.select_lap < ::SaveData.loopNum * ::SaveData.loopNum + 1)
			{
				this.pl.BitBlt(800 - 40 + dx, top + this.selector.cursor * line_height, 32, 32, this.resource.menu_right32x32, 0, 0, this.BLEND_ALPHA, 1.0);
			}
		}

		this.DrawNumber("menu_num22x32", left + 155, top + line_height * 1, this.select_lap, 0, 1.0, 1.0, 1.0, -8.0);
		local th_index = 0;

		if (this.select_lap % 100 >= 10 && this.select_lap % 100 < 20)
		{
			th_index = 0;
		}
		else if (this.select_lap % 10 == 1)
		{
			th_index = 1;
		}
		else if (this.select_lap % 10 == 2)
		{
			th_index = 2;
		}
		else if (this.select_lap % 10 == 3)
		{
			th_index = 3;
		}
		else
		{
			th_index = 0;
		}

		this.pl.BitBlt(left + 170, top + line_height * 1, 32, 32, this.resource.menu_th32x32, 0, th_index * 32, this.BLEND_ALPHA, 1.0);
	}

	this.frontFaderAlpha -= 0.025;

	if (this.frontFaderAlpha < 0.0)
	{
		this.frontFaderAlpha = 0.0;
	}

	this.pl.SetBlend(this.BLEND_ALPHA, this.frontFaderAlpha);
	this.pl.StretchBlt(-10, -10, 820, 620, this.resource.black_dot, 0, 0, 1, 1);
}

function Update1()
{
	this.title_back.alpha = 1.0;
	this.selector.Update();

	if (this.selector.cursor != this.selector.cursorPrev)
	{
		this.PlaySE(0);
	}

	local line_height = 38;

	if (::SaveData.loopNum == 0)
	{
		switch(this.selector.cursor)
		{
		case 0:
			this.cursor_pos.tx = 505;
			this.cursor_pos.ty = 250 + line_height * 0;
			break;

		case 1:
			this.cursor_pos.tx = 625;
			this.cursor_pos.ty = 250 + line_height * 1;
			break;
		}
	}
	else
	{
		switch(this.selector.cursor)
		{
		case 0:
			this.cursor_pos.tx = 505;
			this.cursor_pos.ty = 250 + line_height * 0;
			this.lr_anim_frame = 0;
			break;

		case 1:
			this.cursor_pos.tx = 416;
			this.cursor_pos.ty = 250 + line_height * 1;
			this.lr_anim_frame++;
			break;

		case 2:
			this.cursor_pos.tx = 625;
			this.cursor_pos.ty = 250 + line_height * 2;
			this.lr_anim_frame = 0;
			break;
		}
	}

	this.cursor_pos.x = this.cursor_pos.x * 0.40000001 + this.cursor_pos.tx * 0.60000002;

	if (this.fabs(this.cursor_pos.x - this.cursor_pos.tx) < 2.0)
	{
		this.cursor_pos.x = this.cursor_pos.tx;
	}

	this.cursor_pos.y = this.cursor_pos.y * 0.40000001 + this.cursor_pos.ty * 0.60000002;

	if (this.fabs(this.cursor_pos.y - this.cursor_pos.ty) < 2.0)
	{
		this.cursor_pos.y = this.cursor_pos.ty;
	}

	this.select_lap_delay--;

	if (::SaveData.loopNum > 0 && this.selector.cursor == 1)
	{
		local seID = -1;

		if (this.inputAll.x == 1 || this.inputAll.x > 13)
		{
			this.select_lap += 1 + (this.inputAll.b1 ? 10 : 0) + (this.inputAll.b2 ? 20 : 0);

			if (this.inputAll.x == 1 || this.inputAll.x % 5 == 0)
			{
				seID = 60;
			}
		}
		else if (this.inputAll.x == -1 || this.inputAll.x < -13)
		{
			this.select_lap -= 1 + (this.inputAll.b1 ? 10 : 0) + (this.inputAll.b2 ? 20 : 0);

			if (this.inputAll.x == -1 || this.inputAll.x % 5 == 0)
			{
				seID = 60;
			}
		}

		if (this.select_lap < 1)
		{
			this.select_lap = 1;
			seID = 61;
		}

		if (this.select_lap > ::SaveData.loopNum * ::SaveData.loopNum + 1)
		{
			this.select_lap = ::SaveData.loopNum * ::SaveData.loopNum + 1;
			seID = 61;
		}

		if (seID >= 0)
		{
			this.PlaySE(seID);
		}
	}

	if (this.inputAll.b0)
	{
		::EnableInput(false);

		switch(this.itemImage[this.selector.cursor][0])
		{
		case this.menu_start:
			this.PlaySE(1);
			this.TitleBGAct.SetMode(1);
			this.StageSelectAct.global.OnCreate();
			this.StageSelectAct.SelectCharactor <- [
				-1,
				-1,
				-1
			];
			this.StageSelectAct.DefaultCharactor <- [
				2,
				1,
				3
			];
			this.SetGameData();
			::gameData.loopNum = 0;
			::SaveData.lastPlayLap = 0;
			this.funcUpdate = null;
			this.FaderAct.FadeOut(60, 0, function ()
			{
				this.pl.EndStage(0);
				::StageSelectAct.pl.BeginStage(0);
				this.FaderAct.FadeIn(60, 0, null);
			}.bindenv(this));
			break;

		case this.menu_continue:
			this.PlaySE(1);
			this.TitleBGAct.SetMode(1);
			this.StageSelectAct.global.OnCreate();
			this.StageSelectAct.SelectCharactor <- [
				-1,
				-1,
				-1
			];
			this.StageSelectAct.DefaultCharactor <- [
				2,
				1,
				3
			];
			this.SetGameData();
			::gameData.loopNum = this.select_lap - 1;
			::SaveData.lastPlayLap = ::gameData.loopNum;
			this.funcUpdate = this.Update2.bindenv(this);
			this.frame = 0;
			this.FaderAct.FadeOut(60, 0, null);
			break;

		case this.menu_exit:
			this.ExitGame();
			break;
		}
	}
}

function Update2()
{
	if (this.frame == 70)
	{
		this.PlaySE(51);
	}

	if (this.frame == 100)
	{
		this.pl.EndStage(0);
		::StageSelectAct.pl.BeginStage(0);
		this.FaderAct.FadeIn(60, 0, null);
	}
}

