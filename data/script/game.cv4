function SetGameData()
{
	::playerData <- {};
	this.playerData.homura <- this.PlayerData();
	this.playerData.sayaka <- this.PlayerData();
	this.playerData.kyouko <- this.PlayerData();
	this.playerData.mami <- this.PlayerData();
	this.playerData.madoka <- this.PlayerData();
	this.playerData.QB <- this.PlayerData();
	this.playerData.homura.lifeMax = 88;
	this.playerData.homura.lifeUP = 5;
	this.playerData.homura.soulMax = 5820 * 3;
	this.playerData.homura.soulUp = 102;
	this.playerData.homura.soul = this.playerData.homura.soulMax;
	this.playerData.sayaka.lifeMax = 138;
	this.playerData.sayaka.lifeUP = 7;
	this.playerData.sayaka.soulMax = 6645 * 3;
	this.playerData.sayaka.soulUp = 81;
	this.playerData.sayaka.soul = this.playerData.sayaka.soulMax;
	this.playerData.kyouko.lifeMax = 95;
	this.playerData.kyouko.lifeUP = 6;
	this.playerData.kyouko.soulMax = 7914 * 3;
	this.playerData.kyouko.soulUp = 87;
	this.playerData.kyouko.soul = this.playerData.kyouko.soulMax;
	this.playerData.mami.lifeMax = 110;
	this.playerData.mami.lifeUP = 6;
	this.playerData.mami.soulMax = 7426 * 3;
	this.playerData.mami.soulUp = 84;
	this.playerData.mami.soul = this.playerData.mami.soulMax;
	this.playerData.madoka.lifeMax = 92;
	this.playerData.madoka.lifeUP = 5;
	this.playerData.madoka.soulMax = 9625 * 3;
	this.playerData.madoka.soulUp = 128;
	this.playerData.madoka.soul = this.playerData.madoka.soulMax;
	this.playerData.QB.lifeMax = 1;
	this.playerData.QB.lifeUP = 0;
	this.playerData.QB.soulMax = 1;
	this.playerData.QB.soulUp = 0;
	this.playerData.QB.soul = this.playerData.QB.soulMax;
	this.Game_SetGameActionData();
	::gameData <- {};
	::gameData.playerNum <- 1;
	::gameData.playerSelect <- [
		0,
		1,
		2
	];
	::gameData.loopNum <- 0;
	::gameData.useChara <- [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	];
	::gameData.score <- [
		0,
		0,
		0
	];
	::gameData.maxCombo <- 0;
	::gameData.downNum <- 0;
	::gameData.stageTime <- 0;
	::gameData.gameTime <- 0;
	::gameData.stageResult <- [
		this.StageResult(),
		this.StageResult(),
		this.StageResult(),
		this.StageResult(),
		this.StageResult(),
		this.StageResult()
	];
}

function Game_SetGameActionData()
{
	::game <- {};
	::game.timeStop <- 0;
	::game.stageClear <- false;
	::game.gameOver <- 0;
	::game.stageFlag1 <- 0;
	::game.enableTimeCount <- false;
	::game.enableAddScore <- true;
	::game.enableInput <- true;
	::game.enableHit <- true;
	::game.enableEvent <- true;
}

function WriteGameData()
{
	for( local i = 1; i < 4; i++ )
	{
		if ("player" + i in this.actor)
		{
			switch(this.actor["player" + i].type)
			{
			case 0:
				this.playerData.homura.soul = this.actor["player" + i].soul;
				break;

			case 1:
				this.playerData.kyouko.soul = this.actor["player" + i].soul;
				break;

			case 2:
				this.playerData.madoka.soul = this.actor["player" + i].soul;
				break;

			case 3:
				this.playerData.mami.soul = this.actor["player" + i].soul;
				break;

			case 4:
				this.playerData.sayaka.soul = this.actor["player" + i].soul;
				break;
			}
		}
	}
}

function Game_Reset()
{
	this.ResetActor();
	::stage <- {};
	this.ReleaseWorld2D();
}

function StartStage( stage_, p1_, p2_, p3_ )
{
	this.CreateWorld2D(null);
	this.camera2d.Init();
	this.world2d.SetUpdateFunction(this.UpdateWorld);
	this.world2d.SetHitActorCallbackFunction(this.OnHitActor);
	this.world2d.SetHitCollisionCallbackFunction(this.OnHitCollision);
	this.world2d.CreateAnimationData("data/actor/debug/debug.pat");
	this.world2d.CreateAnimationData("data/actor/system/system.pat");
	this.SetStageTable();
	::stage.playerList <- [
		p1_,
		p2_,
		p3_
	];

	switch(stage_)
	{
	case 1:
		::CompileFile("data/stage/stageBegin/beginStage1.nut", this.getroottable());
		break;

	case 2:
		::CompileFile("data/stage/stageBegin/beginStage2.nut", this.getroottable());
		break;

	case 3:
		::CompileFile("data/stage/stageBegin/beginStage3.nut", this.getroottable());
		break;

	case 4:
		::CompileFile("data/stage/stageBegin/beginStage4.nut", this.getroottable());
		break;

	case 5:
		::CompileFile("data/stage/stageBegin/beginStage5.nut", this.getroottable());
		break;

	case 6:
		::CompileFile("data/stage/stageBegin/beginStage6.nut", this.getroottable());
		break;
	}

	this.Game_SetGameActionData();
	::gameData.stageTime = 0;

	if (::gameData.stageResult[stage_ - 1].state >= 2)
	{
		::game.enableAddScore = false;
	}

	this.PlayerUseCount(p1_, p2_, p3_);

	foreach( a in this.actor )
	{
	}

	foreach( a in ::stage.stageActor )
	{
	}

	this.render.Reset();
}

function StartStage_Test( stage_, master_Init, stageInit_, p1_, p2_, p3_ )
{
	this.SetStageTable();
	this.Game_SetGameActionData();
	this.ReleaseWorld();
	this.ChangeStage(stage_, master_Init, stageInit_);

	if (p1_ != null)
	{
		this.Stage_SetStartPlayer(0, p1_, "palette00" + (::debug.testStage - 1) + ".bmp");
	}

	if (p2_ != null)
	{
		this.Stage_SetStartPlayer(1, p2_, "palette00" + (::debug.testStage - 1) + ".bmp");
	}

	if (p3_ != null)
	{
		this.Stage_SetStartPlayer(2, p3_, "palette00" + (::debug.testStage - 1) + ".bmp");
	}

	this.camera2d.Reset();

	if (::stage.beginScript)
	{
		::stage[::stage.beginScript]();
	}

	foreach( a in this.actor )
	{
	}

	foreach( a in ::stage.stageActor )
	{
	}
}

function ChangeMap_SetPlayer()
{
	for( local i = 1; i <= 3; i++ )
	{
		if ("player" + i in this.actor)
		{
			this.actor["player" + i].CharacterRestart();
			this.actor["player" + i].Warp(::stage.StartPoint[i - 1].x, ::stage.StartPoint[i - 1].y, 0.0);
			this.actor["player" + i].direction = ::stage.StartPoint[i - 1].direction;
			this.actor["player" + i].Update_Gauge();
		}
	}

	this.camera2d.Reset();
}

function ChangeMap( stageInit_ )
{
	this.ReleaseNonPlayer();
	this.world2d.RemoveCollisionFromMap(null);
	this.world2d.ClearRenderLayer();

	if (stageInit_)
	{
		::stage[stageInit_]();
	}

	::stage.scrollLeftLock = false;
	::stage.scrollRightLock = false;
	::stage.scrollUpLock = false;
	::stage.scrollDownLock = false;
	this.ChangeMap_SetPlayer();

	if (::stage.beginScript)
	{
		::stage[::stage.beginScript]();
	}

	foreach( a in this.actor )
	{
	}

	foreach( a in ::stage.stageActor )
	{
	}
}

function ChangeStage( stageFile_, masterInit_, stageInit_ )
{
	if (!stageFile_ || !masterInit_ || !stageInit_)
	{
		return;
	}

	this.world2d.RemoveCollisionFromMap(null);
	this.world2d.ReleaseActor(4294967295);
	this.world2d.ClearRenderLayer();
	this.ResetActor();

	if (stageFile_)
	{
		this.CompileFile(stageFile_, ::stage);
	}

	if (masterInit_)
	{
		::stage[masterInit_]();
	}

	if (stageInit_)
	{
		::stage[stageInit_]();
	}
}

function Game_CountStart()
{
	this.Game_EndTimeStop();
	::game.enableTimeCount = true;
	::game.enableInput = true;
	::game.enableHit = true;
	::game.enableEvent = true;
}

function Game_CountStop()
{
	this.Game_EndTimeStop();
	::game.enableTimeCount = false;
	::game.enableInput = false;
	::game.enableHit = false;
	::game.enableEvent = false;
}

function Game_DefeatEnemy()
{
	::SaveData.defeatEnemy++;
}

function Game_DefeatBoss()
{
	this.Game_CountStop();
	this.Game_EndTimeStop();
	this.game.stageClear = true;
	this.RefleshStageList();
	this.StageGroupKill(::stage.FreeTarget);

	for( local i = 0; i < 3; i++ )
	{
		if ("player" + i in this.actor)
		{
			this.actor["player" + i].scrollOut_margin = null;
		}
	}

	::SaveData.defeatBoss++;
	this.PlaySE(1020);
}

function Game_BossBonus_Party( lv_ )
{
	for( local i = 1; i < 4; i++ )
	{
		if ("player" + i in this.actor)
		{
			if (this.actor["player" + i].soul > 0)
			{
				local A = this.actor["player" + i].level - lv_;

				if (A <= 0)
				{
					this.actor["player" + i].ADD_Exp(100, this.actor["player" + i].type);
				}
			}
		}
	}
}

function Game_StageFail()
{
	this.Set_StageFailResult();
	this.GameOverAct.StageFailed(function ()
	{
		this.FailGameDataSet();
		this.ReleaseWorld2D();
		::StageMainAct.bossLifePer = 0.0;
		::StageMainAct.bossLv = 0;
		this.Game_Reset();
	}.bindenv(this));
}

function Game_Over()
{
	this.Set_GameOverResult();
	this.GameOverAct.GameOver(function ()
	{
		this.FailGameDataSet();
		this.ReleaseWorld2D();
		::StageMainAct.bossLifePer = 0.0;
		::StageMainAct.bossLv = 0;
		this.Game_Reset();
	}.bindenv(this));
}

function Game_StageClear( stage_ )
{
	::stage.stageID <- stage_;

	if (stage_ < 5)
	{
		this.Game_BossBonus_Party(::stage.level);
	}

	this.Set_StageResult(::stage.stageID);
	this.StageResultAct.BeginStageResult(function ()
	{
		this.ClearGameDataSet(::stage.stageID);
		this.ReleaseWorld2D();
		::StageMainAct.bossLifePer = 0.0;
		::StageMainAct.bossLv = 0;
		this.Game_Reset();
	}.bindenv(this));
}

function Game_AllClear()
{
	local ED_ = 0;
	local ED_Num = 7;

	if (this.playerData.homura.condition >= 2)
	{
		ED_ = ED_ | 1;
	}

	if (this.playerData.kyouko.condition >= 2)
	{
		ED_ = ED_ | 2;
	}

	if (this.playerData.madoka.condition >= 2)
	{
		ED_ = ED_ | 4;
	}

	if (this.playerData.mami.condition >= 2)
	{
		ED_ = ED_ | 16;
	}

	if (this.playerData.sayaka.condition >= 2)
	{
		ED_ = ED_ | 32;
	}

	if (ED_ == (32 | 4))
	{
		ED_Num = 0;
	}

	if (ED_ == (32 | 2 | 16))
	{
		ED_Num = 1;
	}

	if (ED_ == 32)
	{
		ED_Num = 2;
	}

	if (ED_ == (1 | 2 | 4 | 32))
	{
		ED_Num = 3;
	}

	if (ED_ == (1 | 4 | 16))
	{
		ED_Num = 4;
	}

	if (ED_ == 4)
	{
		ED_Num = 5;
	}

	if (ED_ == 16)
	{
		ED_Num = 6;
	}

	if (ED_ == 2)
	{
		ED_Num = 8;
	}

	if (ED_ == 0)
	{
		ED_Num = 9;
	}

	::SaveData.edList[ED_Num]++;
	this.Set_StageResult(5);
	this.FaderAct.FadeOut(120, 0, function ()
	{
		local ED_ = 0;
		local ED_Num = 7;

		if (this.playerData.homura.condition >= 2)
		{
			ED_ = ED_ | 1;
		}

		if (this.playerData.kyouko.condition >= 2)
		{
			ED_ = ED_ | 2;
		}

		if (this.playerData.madoka.condition >= 2)
		{
			ED_ = ED_ | 4;
		}

		if (this.playerData.mami.condition >= 2)
		{
			ED_ = ED_ | 16;
		}

		if (this.playerData.sayaka.condition >= 2)
		{
			ED_ = ED_ | 32;
		}

		if (ED_ == (32 | 4))
		{
			ED_Num = 0;
		}

		if (ED_ == (32 | 2 | 16))
		{
			ED_Num = 1;
		}

		if (ED_ == 32)
		{
			ED_Num = 2;
		}

		if (ED_ == (1 | 2 | 4 | 32))
		{
			ED_Num = 3;
		}

		if (ED_ == (1 | 4 | 16))
		{
			ED_Num = 4;
		}

		if (ED_ == 4)
		{
			ED_Num = 5;
		}

		if (ED_ == 16)
		{
			ED_Num = 6;
		}

		if (ED_ == 2)
		{
			ED_Num = 8;
		}

		if (ED_ == 0)
		{
			ED_Num = 9;
		}

		this.ReleaseWorld2D();
		this.Game_Reset();
		::StageMainAct.bossLifePer = 0.0;
		::StageMainAct.bossLv = 0;
		this.StaffrollAct.Begin(ED_Num, ::gameData.loopNum);
		::SaveData.lastPlayLap++;
	});
}

function Game_BeginEnding()
{
	local edNum_ = 0;
}

function StageAppearCheck()
{
	if (::gameData.stageResult[4].state == 0 && (this.playerData.sayaka.condition == 2 || this.playerData.sayaka.condition == 3))
	{
		::gameData.stageResult[4].state = 1;
	}

	if (::gameData.stageResult[5].state == 0)
	{
		if (::gameData.stageResult[3].state == 2 && (::gameData.stageResult[4].state == 2 || ::gameData.stageResult[4].state == 0))
		{
			::gameData.stageResult[5].state = 1;
		}
	}
}

function ClearGameDataSet( stage_ )
{
	local st_ = ::gameData.stageResult[stage_];
	st_.state = 2;

	if (stage_ <= 2 && ::gameData.stageResult[stage_ + 1].state == 0)
	{
		::gameData.stageResult[stage_ + 1].state = 1;
	}

	this.StageAppearCheck();

	for( local i = 0; i < 4; i++ )
	{
		if ("player" + i in this.actor)
		{
			local a = this.actor["player" + i];

			switch(a.type)
			{
			case 0:
				::playerData.homura.soul = ::playerData.homura.soulMax;
				break;

			case 1:
				::playerData.kyouko.soul = ::playerData.kyouko.soulMax;
				break;

			case 2:
				::playerData.madoka.soul = ::playerData.madoka.soulMax;
				break;

			case 3:
				::playerData.mami.soul = ::playerData.mami.soulMax;
				break;

			case 4:
				::playerData.sayaka.soul = ::playerData.sayaka.soulMax;
				break;

			case 5:
				::playerData.homura.soul = ::playerData.homura.soulMax;
				break;
			}
		}
	}
}

function FailGameDataSet()
{
	this.StageAppearCheck();
}

function SetVibration( Pos_, V_, R_ )
{
	if (::SaveData.vibration)
	{
		local P_ = this.Vector3();
		P_.x = ::camera.xEye - Pos_.x;
		P_.y = ::camera.yEye - Pos_.y;
		P_.z = ::camera.zEye - Pos_.z;
		local F = 0;

		if (R_ > 0.0)
		{
			F = (P_.Length() * R_).tointeger();
		}

		if (V_ - F > 0)
		{
			this.camera.vibrationRadius = V_ - F;
		}
	}
}

function Set_MonoColor()
{
	::stage.renderState.pixelShader = 1;
	::stage.renderState.blend = 1.0;
}

function Set_ReverseColor()
{
	::stage.renderState.pixelShader = 1;
	::stage.renderState.blend = 1.0;
}

function Clear_FieldEffect()
{
	::stage.renderState.pixelShader = 255;
	::stage.renderState.blend = 0.0;
}

function Set_Vibration( X_ )
{
	this.camera2d.vibrationRadius = X_;
}

function SetDamageFont( X, x, y, type_ )
{
	local b = 1;
	local a = 0.0;
	local t = {};
	t.scale <- 1.0;

	if (X >= 10)
	{
		t.scale = 1.5;
	}

	if (X >= 100)
	{
		t.scale = 2.0;
	}

	if (X >= 1000)
	{
		b = 4;
		a = 40;
	}
	else if (X >= 100)
	{
		b = 3;
		a = 24;
	}
	else if (X >= 10)
	{
		b = 2;
		a = 8;
	}

	for( local i = b; i > 0; i-- )
	{
		switch(i)
		{
		case 1:
			t.val <- X % 10;
			t.type <- type_;
			this.world2d.CreateActor(x + a, y, 1.0, this.Actor2D.DamageFont, t);
			break;

		case 2:
			t.val <- (X % 100 * 0.1).tointeger();
			t.type <- type_;
			this.world2d.CreateActor(x + a - 12, y, 1.0, this.Actor2D.DamageFont, t);
			break;

		case 3:
			t.val <- (X % 1000 * 0.0099999998).tointeger();
			t.type <- type_;
			this.world2d.CreateActor(x + a - 24, y, 1.0, this.Actor2D.DamageFont, t);
			break;

		case 4:
			t.val <- (X % 10000 * 0.001).tointeger();
			t.type <- type_;
			this.world2d.CreateActor(x + a - 36, y, 1.0, this.Actor2D.DamageFont, t);
			break;
		}
	}
}

function SetBigDamageFont( X, x, y, type_ )
{
	local b = 1;
	local a = 0.0;
	local t = {};
	t.scale <- 2.5;

	if (X >= 1000)
	{
		b = 4;
		a = 120;
	}
	else if (X >= 100)
	{
		b = 3;
		a = 72;
	}
	else if (X >= 10)
	{
		b = 2;
		a = 24;
	}

	for( local i = b; i > 0; i-- )
	{
		switch(i)
		{
		case 1:
			t.val <- X % 10;
			t.type <- type_;
			this.world2d.CreateActor(x + a, y, 1.0, this.Actor2D.BigDamageFont, t);
			break;

		case 2:
			t.val <- (X % 100 * 0.1).tointeger();
			t.type <- type_;
			this.world2d.CreateActor(x + a - 24, y, 1.0, this.Actor2D.BigDamageFont, t);
			break;

		case 3:
			t.val <- (X % 1000 * 0.0099999998).tointeger();
			t.type <- type_;
			this.world2d.CreateActor(x + a - 48, y, 1.0, this.Actor2D.BigDamageFont, t);
			break;

		case 4:
			t.val <- (X % 10000 * 0.001).tointeger();
			t.type <- type_;
			this.world2d.CreateActor(x + a - 72, y, 1.0, this.Actor2D.BigDamageFont, t);
			break;
		}
	}
}

function SetTrail( model_, Pos_, target_, scale_, length_, vibe_ )
{
	local t = this.EffectObject();
	local YPR_ = this.Vector3();
	t.scale = scale_;
	t.flag1 = length_;
	t.flag2 = vibe_;
	t.trace = target_;
	local e = this.world.CreateObject("trail", model_, Pos_, YPR_, ::Object.TrailEffectInit, ::Object.TrailEffect, t);
	e.isEffect = true;
	return e;
}

function Game_UnlockResult( A_ )
{
	if (::SaveData.result[A_] != 0)
	{
		return;
	}

	local Check_ = false;

	switch(A_)
	{
	case 0:
		::SaveData.result[0] = 1;
		Check_ = true;
		break;

	case 1:
		::SaveData.result[1] = 2;
		Check_ = true;
		break;

	case 2:
		::SaveData.result[2] = 2;
		Check_ = true;
		break;

	case 3:
		::SaveData.result[3] = 2;
		Check_ = true;
		break;

	case 4:
		::SaveData.result[4] = 2;
		Check_ = true;
		break;

	case 5:
		::SaveData.result[5] = 2;
		Check_ = true;
		break;

	case 6:
		::SaveData.result[6] = 2;
		Check_ = true;
		break;

	case 7:
		::SaveData.result[7] = 2;
		Check_ = true;
		break;

	case 8:
		::SaveData.result[8] = 2;
		Check_ = true;
		break;

	case 9:
		::SaveData.result[9] = 2;
		Check_ = true;
		break;

	case 10:
		::SaveData.result[10] = 2;
		Check_ = true;
		break;

	case 11:
		::SaveData.result[11] = 2;
		Check_ = true;
		break;

	case 12:
		::SaveData.result[12] = 2;
		Check_ = true;
		break;

	case 13:
		::SaveData.result[13] = 2;
		Check_ = true;
		break;

	case 14:
		::SaveData.result[14] = 2;
		Check_ = true;
		break;

	case 15:
		::SaveData.result[15] = 2;
		Check_ = true;
		break;

	case 16:
		::SaveData.result[16] = 2;
		Check_ = true;
		break;

	case 17:
		::SaveData.result[17] = 2;
		Check_ = true;
		break;

	case 18:
		::SaveData.result[18] = 2;
		Check_ = true;
		break;

	case 19:
		::SaveData.result[19] = 2;
		Check_ = true;
		break;
	}

	if (Check_)
	{
		this.SaveCurrentSaveData();
	}
}

function Game_CheckResult()
{
	if (::SaveData.loopNum > 0)
	{
		this.Game_UnlockResult(0);
	}

	local c_ = true;

	foreach( a in ::SaveData.edList )
	{
	}

	foreach( a in ::SaveData.edList )
	{
		if (a <= 0)
		{
			c_ = false;
			break;
		}
	}

	if (c_)
	{
		this.Game_UnlockResult(2);
	}

	if (::SaveData.comboRank[0][0] >= 100)
	{
		this.Game_UnlockResult(18);
	}

	if (::SaveData.comboRank[0][0] >= 500)
	{
		this.Game_UnlockResult(19);
	}

	if (::SaveData.useMagic >= 100)
	{
		this.Game_UnlockResult(16);
	}

	if (::SaveData.useMagic >= 1000)
	{
		this.Game_UnlockResult(17);
	}

	local count_ = 0;
	local A_ = true;
	local Homura_ = 0;

	if (::SaveData.useChara[1] >= 100)
	{
		this.Game_UnlockResult(8);
	}

	if (::SaveData.useChara[2] >= 100)
	{
		this.Game_UnlockResult(4);
	}

	if (::SaveData.useChara[3] >= 100)
	{
		this.Game_UnlockResult(6);
	}

	if (::SaveData.useChara[4] >= 100)
	{
		this.Game_UnlockResult(7);
	}

	for( local i = 0; i < ::SaveData.useChara.len(); i++ )
	{
		if (i <= 5)
		{
			if (i != 0 && i != 5)
			{
				if (::SaveData.useChara[i] < 100)
				{
					A_ = false;
				}

				count_ += ::SaveData.useChara[i];
			}
			else
			{
				Homura_ += ::SaveData.useChara[i];
				count_ += ::SaveData.useChara[i];
			}
		}
	}

	if (Homura_ < 100)
	{
		A_ = false;
	}
	else
	{
		this.Game_UnlockResult(5);
	}

	if (A_)
	{
		this.Game_UnlockResult(9);
	}

	if (count_ >= 100)
	{
		this.Game_UnlockResult(3);
	}

	if (::SaveData.defeatEnemy >= 1000)
	{
		this.Game_UnlockResult(10);
	}

	if (::SaveData.defeatEnemy >= 10000)
	{
		this.Game_UnlockResult(11);
	}

	if (::SaveData.defeatBoss >= 100)
	{
		this.Game_UnlockResult(12);
	}

	if (::SaveData.defeatBoss >= 1000)
	{
		this.Game_UnlockResult(13);
	}

	foreach( a in ::playerData )
	{
		if (a.level >= 30)
		{
			this.Game_UnlockResult(14);
		}

		if (a.level >= 99)
		{
			this.Game_UnlockResult(15);
		}
	}
}

function Game_PlayerDead( type_ )
{
	local name_;

	switch(type_)
	{
	case 0:
		name_ = "homura";
		break;

	case 1:
		name_ = "kyouko";
		break;

	case 2:
		name_ = "madoka";
		break;

	case 3:
		name_ = "mami";
		break;

	case 4:
		name_ = "sayaka";
		break;

	case 5:
		name_ = "homura";
		break;
	}

	if (name_ != null)
	{
		::playerData[name_].condition = 2;
		::SaveData.playerDeadNum[type_]++;
		this.Game_PlayerDown(type_);
		this.SaveCurrentSaveData();
	}
}

function Game_PlayerDown( type_ )
{
	::gameData.downNum++;
}

function Set_GameOverResult()
{
	this.ComboResult();
	this.Add_GameTime();
	::SaveData.loseloopNum++;
	this.StageAppearCheck();
	this.Game_CheckResult();
	this.SaveCurrentSaveData();
}

function Set_StageFailResult()
{
	this.ComboResult();
	this.Add_GameTime();
	this.Game_CheckResult();
	this.SaveCurrentSaveData();
}

function Set_StageResult( stage_ )
{
	if (stage_ == 5)
	{
		this.ComboResult();
		this.ScoreResult();
		this.TimeResult(5);
		::gameData.loopNum++;

		if (::gameData.loopNum >= ::SaveData.loopNum)
		{
			::SaveData.loopNum = ::gameData.loopNum;
		}

		if (::gameData.downNum == 0)
		{
			this.Game_UnlockResult(1);
		}
	}
	else
	{
		this.ComboResult();
		this.TimeResult(stage_);
	}

	this.Game_CheckResult();
	this.SaveCurrentSaveData();
}

function ComboResult()
{
	for( local i = 0; i < ::SaveData.comboRank.len(); i++ )
	{
		if (::gameData.maxCombo > ::SaveData.comboRank[i][0])
		{
			local t = [
				::gameData.maxCombo,
				null,
				null,
				null
			];

			for( local j = 1; j < 4; j++ )
			{
				if ("player" + j in this.actor)
				{
					t[j] = ::actor["player" + j].type;
				}
			}

			::SaveData.comboRank.insert(i, t);
			::SaveData.comboRank.resize(10, [
				0,
				null,
				null,
				null
			]);
			break;
		}
	}
}

function ScoreResult()
{
	local score_ = ::gameData.score[0] + ::gameData.score[1] + ::gameData.score[2];

	for( local i = 0; i < ::SaveData.scoreRank.len(); i++ )
	{
		if (score_ > ::SaveData.scoreRank[i][0])
		{
			local t = [
				score_,
				null,
				null,
				null,
				null,
				null,
				null
			];

			for( local j = 1; j < 4; j++ )
			{
				if ("player" + j in this.actor)
				{
					t[j] = ::actor["player" + j].type;
				}
			}

			::SaveData.scoreRank.insert(i, t);
			::SaveData.scoreRank.resize(10, [
				0,
				null,
				null,
				null
			]);
			break;
		}
	}
}

function Add_GameTime()
{
	::gameData.gameTime += ::gameData.stageTime;
}

function TimeResult( stage_ )
{
	this.Add_GameTime();
	local stTime_ = ::gameData.stageResult[stage_].time;

	if (stTime_ == 0 || stTime_ != 0 && stTime_ > ::gameData.stageTime)
	{
		::gameData.stageResult[stage_].time = ::gameData.stageTime;
	}

	if (stage_ == 5)
	{
		for( local i = 0; i < ::SaveData.timeRank.len(); i++ )
		{
			if (::SaveData.timeRank[i][0] == 0 || ::gameData.gameTime < ::SaveData.timeRank[i][0] && ::SaveData.timeRank[i][0] > 0)
			{
				local t = [
					::gameData.gameTime,
					null,
					null,
					null
				];

				for( local j = 1; j < 4; j++ )
				{
					if ("player" + j in this.actor)
					{
						t[j] = ::actor["player" + j].type;
					}
				}

				::SaveData.timeRank.insert(i, t);
				::SaveData.timeRank.resize(10, [
					0,
					null,
					null,
					null
				]);
				break;
			}
		}
	}
}

function PlayerUseCount( p1_, p2_, p3_ )
{
	local pNum = 5;

	if (p1_ != null)
	{
		if (p1_ <= pNum)
		{
			::SaveData.useChara[p1_]++;
			::gameData.useChara[p1_]++;
		}
	}

	if (p2_ != null)
	{
		if (p2_ <= pNum)
		{
			::SaveData.useChara[p2_]++;
			::gameData.useChara[p2_]++;
		}
	}

	if (p3_ != null)
	{
		if (p3_ <= pNum)
		{
			::SaveData.useChara[p3_]++;
			::gameData.useChara[p3_]++;
		}
	}

	this.SaveCurrentSaveData();
	local s = ::SaveData;
	local s = ::gameData;
}

function Game_EndTimeStop()
{
	this.game.timeStop = 0;
	::stage.renderState.pixelShader = 255;
}

